
20250701_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004194  08004194  00005194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080041f8  080041f8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f8  080041f8  000051f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004200  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001a0  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf89  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d6e  00000000  00000000  00011fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  00013d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069f  00000000  00000000  000145e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2a1  00000000  00000000  00014c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8b8  00000000  00000000  0002ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099b7a  00000000  00000000  0003a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d4352  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002284  00000000  00000000  000d4398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  000d661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800417c 	.word	0x0800417c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800417c 	.word	0x0800417c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b08c      	sub	sp, #48	@ 0x30
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb77 	bl	80008c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f88d 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f99b 	bl	8000510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f969 	bl	80004b0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f8df 	bl	80003a0 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f935 	bl	8000450 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80001e6:	483b      	ldr	r0, [pc, #236]	@ (80002d4 <main+0x10c>)
 80001e8:	f000 fdb9 	bl	8000d5e <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001ec:	2102      	movs	r1, #2
 80001ee:	4839      	ldr	r0, [pc, #228]	@ (80002d4 <main+0x10c>)
 80001f0:	f000 ff50 	bl	8001094 <HAL_CAN_ActivateNotification>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <main+0x36>
  {
 	  Error_Handler();
 80001fa:	f000 f9ed 	bl	80005d8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000202:	f000 fbc3 	bl	800098c <HAL_Delay>
    //char msg[] ="Hello STM32\r\n";
    //HAL_UART_Transmit(&huart2,(uint8_t *)msg,sizeof(msg),3000);

    TxHeader.StdId = 0x321;
 8000206:	4b34      	ldr	r3, [pc, #208]	@ (80002d8 <main+0x110>)
 8000208:	f240 3221 	movw	r2, #801	@ 0x321
 800020c:	601a      	str	r2, [r3, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 800020e:	4b32      	ldr	r3, [pc, #200]	@ (80002d8 <main+0x110>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 8000214:	4b30      	ldr	r3, [pc, #192]	@ (80002d8 <main+0x110>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 3;
 800021a:	4b2f      	ldr	r3, [pc, #188]	@ (80002d8 <main+0x110>)
 800021c:	2203      	movs	r2, #3
 800021e:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000220:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <main+0x110>)
 8000222:	2200      	movs	r2, #0
 8000224:	751a      	strb	r2, [r3, #20]

    TxData[0] = 0x31;
 8000226:	4b2d      	ldr	r3, [pc, #180]	@ (80002dc <main+0x114>)
 8000228:	2231      	movs	r2, #49	@ 0x31
 800022a:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0x32;
 800022c:	4b2b      	ldr	r3, [pc, #172]	@ (80002dc <main+0x114>)
 800022e:	2232      	movs	r2, #50	@ 0x32
 8000230:	705a      	strb	r2, [r3, #1]
    TxData[2] = cnt;
 8000232:	4b2b      	ldr	r3, [pc, #172]	@ (80002e0 <main+0x118>)
 8000234:	781a      	ldrb	r2, [r3, #0]
 8000236:	4b29      	ldr	r3, [pc, #164]	@ (80002dc <main+0x114>)
 8000238:	709a      	strb	r2, [r3, #2]
//    	char msg[] ="hal_ok\r\n";
//    	HAL_UART_Transmit(&huart2,(uint8_t *)msg,sizeof(msg),3000);
//     // Error_Handler();
//    }
    // 全メールボックスが空になるのを待つ
    while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 800023a:	e025      	b.n	8000288 <main+0xc0>
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800023c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000244:	f001 fc94 	bl	8001b70 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000250:	f001 fc8e 	bl	8001b70 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000254:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025c:	f001 fc88 	bl	8001b70 <HAL_GPIO_TogglePin>
		char msg[] ="mailbox is not empty\r\n";
 8000260:	4b20      	ldr	r3, [pc, #128]	@ (80002e4 <main+0x11c>)
 8000262:	1d3c      	adds	r4, r7, #4
 8000264:	461d      	mov	r5, r3
 8000266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800026e:	6020      	str	r0, [r4, #0]
 8000270:	3404      	adds	r4, #4
 8000272:	8021      	strh	r1, [r4, #0]
 8000274:	3402      	adds	r4, #2
 8000276:	0c0b      	lsrs	r3, r1, #16
 8000278:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)msg,sizeof(msg),3000);
 800027a:	1d39      	adds	r1, r7, #4
 800027c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000280:	2217      	movs	r2, #23
 8000282:	4819      	ldr	r0, [pc, #100]	@ (80002e8 <main+0x120>)
 8000284:	f003 f822 	bl	80032cc <HAL_UART_Transmit>
    while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {
 8000288:	4812      	ldr	r0, [pc, #72]	@ (80002d4 <main+0x10c>)
 800028a:	f000 fdac 	bl	8000de6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800028e:	4603      	mov	r3, r0
 8000290:	2b03      	cmp	r3, #3
 8000292:	d1d3      	bne.n	800023c <main+0x74>
    }
    char msg[] ="mail box is empty\r\n";
 8000294:	4b15      	ldr	r3, [pc, #84]	@ (80002ec <main+0x124>)
 8000296:	f107 041c 	add.w	r4, r7, #28
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	682b      	ldr	r3, [r5, #0]
 80002a2:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart2,(uint8_t *)msg,sizeof(msg),3000);
 80002a4:	f107 011c 	add.w	r1, r7, #28
 80002a8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80002ac:	2214      	movs	r2, #20
 80002ae:	480e      	ldr	r0, [pc, #56]	@ (80002e8 <main+0x120>)
 80002b0:	f003 f80c 	bl	80032cc <HAL_UART_Transmit>

    if(cnt > 250){
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <main+0x118>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2bfa      	cmp	r3, #250	@ 0xfa
 80002ba:	d903      	bls.n	80002c4 <main+0xfc>
      cnt = 0;
 80002bc:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <main+0x118>)
 80002be:	2200      	movs	r2, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e79c      	b.n	80001fe <main+0x36>
    } else {
      cnt++;
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <main+0x118>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <main+0x118>)
 80002ce:	701a      	strb	r2, [r3, #0]
  {
 80002d0:	e795      	b.n	80001fe <main+0x36>
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028
 80002d8:	20000160 	.word	0x20000160
 80002dc:	20000194 	.word	0x20000194
 80002e0:	200001a4 	.word	0x200001a4
 80002e4:	08004194 	.word	0x08004194
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	080041ac 	.word	0x080041ac

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	@ 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002fa:	2228      	movs	r2, #40	@ 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 ff0f 	bl	8004122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 031c 	add.w	r3, r7, #28
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]
 8000322:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032c:	2310      	movs	r3, #16
 800032e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000334:	2300      	movs	r3, #0
 8000336:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 8000338:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 800033c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fc2e 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800034e:	f000 f943 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000362:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	f107 031c 	add.w	r3, r7, #28
 800036c:	2102      	movs	r1, #2
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fc26 	bl	8002bc0 <HAL_RCC_ClockConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800037a:	f000 f92d 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f002 fe2d 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000394:	f000 f920 	bl	80005d8 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3758      	adds	r7, #88	@ 0x58
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	@ 0x28
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003a6:	4b28      	ldr	r3, [pc, #160]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003a8:	4a28      	ldr	r2, [pc, #160]	@ (800044c <MX_CAN_Init+0xac>)
 80003aa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80003ac:	4b26      	ldr	r3, [pc, #152]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003ae:	2203      	movs	r2, #3
 80003b0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003b2:	4b25      	ldr	r3, [pc, #148]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b8:	4b23      	ldr	r3, [pc, #140]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 80003be:	4b22      	ldr	r3, [pc, #136]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003c0:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80003c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003c6:	4b20      	ldr	r3, [pc, #128]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003da:	4b1b      	ldr	r3, [pc, #108]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003e0:	4b19      	ldr	r3, [pc, #100]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e6:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ec:	4b16      	ldr	r3, [pc, #88]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f2:	4815      	ldr	r0, [pc, #84]	@ (8000448 <MX_CAN_Init+0xa8>)
 80003f4:	f000 faee 	bl	80009d4 <HAL_CAN_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003fe:	f000 f8eb 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // Qiita記事のCANフィルタ設定を移植
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800040a:	2301      	movs	r3, #1
 800040c:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000422:	2301      	movs	r3, #1
 8000424:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000426:	230e      	movs	r3, #14
 8000428:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800042a:	463b      	mov	r3, r7
 800042c:	4619      	mov	r1, r3
 800042e:	4806      	ldr	r0, [pc, #24]	@ (8000448 <MX_CAN_Init+0xa8>)
 8000430:	f000 fbcb 	bl	8000bca <HAL_CAN_ConfigFilter>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_CAN_Init+0x9e>
  {
    Error_Handler();
 800043a:	f000 f8cd 	bl	80005d8 <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	3728      	adds	r7, #40	@ 0x28
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000028 	.word	0x20000028
 800044c:	40006400 	.word	0x40006400

08000450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000454:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000456:	4a15      	ldr	r2, [pc, #84]	@ (80004ac <MX_USART1_UART_Init+0x5c>)
 8000458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 800045c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000476:	220c      	movs	r2, #12
 8000478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000480:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000486:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	@ (80004a8 <MX_USART1_UART_Init+0x58>)
 8000494:	f002 fecc 	bl	8003230 <HAL_UART_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800049e:	f000 f89b 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000050 	.word	0x20000050
 80004ac:	40013800 	.word	0x40013800

080004b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004b6:	4a15      	ldr	r2, [pc, #84]	@ (800050c <MX_USART2_UART_Init+0x5c>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80004c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_USART2_UART_Init+0x58>)
 80004f4:	f002 fe9c 	bl	8003230 <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fe:	f000 f86b 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000d8 	.word	0x200000d8
 800050c:	40004400 	.word	0x40004400

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a1e      	ldr	r2, [pc, #120]	@ (80005a4 <MX_GPIO_Init+0x94>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a18      	ldr	r2, [pc, #96]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_GPIO_Init+0x94>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <MX_GPIO_Init+0x94>)
 800055c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_GPIO_Init+0x94>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000578:	f001 fae2 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800057c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000580:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000582:	2301      	movs	r3, #1
 8000584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	4619      	mov	r1, r3
 8000594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000598:	f001 f960 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Qiita記事の受信コールバック関数を移植
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 fc4a 	bl	8000e50 <HAL_CAN_GetRxMessage>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 80005c2:	f000 f809 	bl	80005d8 <Error_Handler>
  if (RxHeader.StdId == 0x321)
  {
    // GPIO_PIN_9と10をトグルして受信を可視化

  }
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000019c 	.word	0x2000019c
 80005d4:	20000178 	.word	0x20000178

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <Error_Handler+0x8>

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_MspInit+0x44>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <HAL_MspInit+0x44>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <HAL_MspInit+0x44>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <HAL_MspInit+0x44>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <HAL_MspInit+0x44>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_MspInit+0x44>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <HAL_CAN_MspInit+0x90>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d131      	bne.n	80006b2 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 8000654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a15      	ldr	r2, [pc, #84]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <HAL_CAN_MspInit+0x94>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800067e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000690:	2309      	movs	r3, #9
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f001 f8dd 	bl	800185c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2014      	movs	r0, #20
 80006a8:	f001 f825 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006ac:	2014      	movs	r0, #20
 80006ae:	f001 f83e 	bl	800172e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	@ 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40006400 	.word	0x40006400
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a33      	ldr	r2, [pc, #204]	@ (80007b0 <HAL_UART_MspInit+0xec>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e6:	4b33      	ldr	r3, [pc, #204]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a32      	ldr	r2, [pc, #200]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a2c      	ldr	r2, [pc, #176]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000716:	23c0      	movs	r3, #192	@ 0xc0
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000726:	2307      	movs	r3, #7
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <HAL_UART_MspInit+0xf4>)
 8000732:	f001 f893 	bl	800185c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000736:	e036      	b.n	80007a6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <HAL_UART_MspInit+0xf8>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d131      	bne.n	80007a6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a1b      	ldr	r2, [pc, #108]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_UART_MspInit+0xf0>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000772:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000784:	2307      	movs	r3, #7
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f001 f863 	bl	800185c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2026      	movs	r0, #38	@ 0x26
 800079c:	f000 ffab 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a0:	2026      	movs	r0, #38	@ 0x26
 80007a2:	f000 ffc4 	bl	800172e <HAL_NVIC_EnableIRQ>
}
 80007a6:	bf00      	nop
 80007a8:	3730      	adds	r7, #48	@ 0x30
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013800 	.word	0x40013800
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400
 80007bc:	40004400 	.word	0x40004400

080007c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <NMI_Handler+0x4>

080007c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <MemManage_Handler+0x4>

080007d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000816:	f000 f899 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <CAN_RX0_IRQHandler+0x10>)
 8000826:	f000 fc5b 	bl	80010e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028

08000834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000838:	4802      	ldr	r0, [pc, #8]	@ (8000844 <USART2_IRQHandler+0x10>)
 800083a:	f002 fdd1 	bl	80033e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000d8 	.word	0x200000d8

08000848 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <SystemInit+0x20>)
 800084e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000852:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <SystemInit+0x20>)
 8000854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800086c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000870:	f7ff ffea 	bl	8000848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	@ (80008ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <LoopForever+0xe>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	@ (80008b8 <LoopForever+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089a:	f003 fc4b 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800089e:	f7ff fc93 	bl	80001c8 <main>

080008a2 <LoopForever>:

LoopForever:
    b LoopForever
 80008a2:	e7fe      	b.n	80008a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b0:	08004200 	.word	0x08004200
  ldr r2, =_sbss
 80008b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008b8:	200001ac 	.word	0x200001ac

080008bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC1_2_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_Init+0x28>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_Init+0x28>)
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 ff05 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 f808 	bl	80008ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff fe82 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_InitTick+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x58>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000902:	fbb3 f3f1 	udiv	r3, r3, r1
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ff1d 	bl	800174a <HAL_SYSTICK_Config>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e00e      	b.n	8000938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d80a      	bhi.n	8000936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 fee5 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800092c:	4a06      	ldr	r2, [pc, #24]	@ (8000948 <HAL_InitTick+0x5c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000000 	.word	0x20000000
 8000944:	20000008 	.word	0x20000008
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_IncTick+0x20>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x24>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_IncTick+0x24>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000008 	.word	0x20000008
 8000970:	200001a8 	.word	0x200001a8

08000974 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;  
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200001a8 	.word	0x200001a8

0800098c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffde 	bl	8000974 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e0ed      	b.n	8000bc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe1a 	bl	800062c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a08:	f7ff ffb4 	bl	8000974 <HAL_GetTick>
 8000a0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a0e:	e012      	b.n	8000a36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a10:	f7ff ffb0 	bl	8000974 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	d90b      	bls.n	8000a36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2205      	movs	r2, #5
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e0c5      	b.n	8000bc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0e5      	beq.n	8000a10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0202 	bic.w	r2, r2, #2
 8000a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a54:	f7ff ff8e 	bl	8000974 <HAL_GetTick>
 8000a58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5a:	e012      	b.n	8000a82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a5c:	f7ff ff8a 	bl	8000974 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b0a      	cmp	r3, #10
 8000a68:	d90b      	bls.n	8000a82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2205      	movs	r2, #5
 8000a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e09f      	b.n	8000bc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1e5      	bne.n	8000a5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7e1b      	ldrb	r3, [r3, #24]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d108      	bne.n	8000aaa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e007      	b.n	8000aba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7e5b      	ldrb	r3, [r3, #25]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d108      	bne.n	8000ad4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e007      	b.n	8000ae4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ae2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7e9b      	ldrb	r3, [r3, #26]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d108      	bne.n	8000afe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e007      	b.n	8000b0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0220 	bic.w	r2, r2, #32
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7edb      	ldrb	r3, [r3, #27]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d108      	bne.n	8000b28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0210 	bic.w	r2, r2, #16
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f042 0210 	orr.w	r2, r2, #16
 8000b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7f1b      	ldrb	r3, [r3, #28]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 0208 	orr.w	r2, r2, #8
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	e007      	b.n	8000b62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f022 0208 	bic.w	r2, r2, #8
 8000b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7f5b      	ldrb	r3, [r3, #29]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d108      	bne.n	8000b7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f042 0204 	orr.w	r2, r2, #4
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f022 0204 	bic.w	r2, r2, #4
 8000b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	ea42 0103 	orr.w	r1, r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b087      	sub	sp, #28
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000be2:	7cfb      	ldrb	r3, [r7, #19]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d003      	beq.n	8000bf0 <HAL_CAN_ConfigFilter+0x26>
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	f040 80aa 	bne.w	8000d44 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	f003 031f 	and.w	r3, r3, #31
 8000c08:	2201      	movs	r2, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d123      	bne.n	8000c72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	401a      	ands	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3248      	adds	r2, #72	@ 0x48
 8000c52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c68:	6979      	ldr	r1, [r7, #20]
 8000c6a:	3348      	adds	r3, #72	@ 0x48
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d122      	bne.n	8000cc0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	431a      	orrs	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3248      	adds	r2, #72	@ 0x48
 8000ca0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb6:	6979      	ldr	r1, [r7, #20]
 8000cb8:	3348      	adds	r3, #72	@ 0x48
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000cda:	e007      	b.n	8000cec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d06:	e007      	b.n	8000d18 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d107      	bne.n	8000d30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d36:	f023 0201 	bic.w	r2, r3, #1
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e006      	b.n	8000d52 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
  }
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d12e      	bne.n	8000dd0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d8a:	f7ff fdf3 	bl	8000974 <HAL_GetTick>
 8000d8e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d90:	e012      	b.n	8000db8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d92:	f7ff fdef 	bl	8000974 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	d90b      	bls.n	8000db8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2205      	movs	r2, #5
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e012      	b.n	8000dde <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1e5      	bne.n	8000d92 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e006      	b.n	8000dde <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
  }
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d002      	beq.n	8000e06 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d11d      	bne.n	8000e42 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d003      	beq.n	8000e74 <HAL_CAN_GetRxMessage+0x24>
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	f040 8103 	bne.w	800107a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10e      	bne.n	8000e98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d116      	bne.n	8000eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e0f7      	b.n	8001088 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d107      	bne.n	8000eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0e8      	b.n	8001088 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	331b      	adds	r3, #27
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	4413      	add	r3, r2
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0204 	and.w	r2, r3, #4
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10c      	bne.n	8000eee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	331b      	adds	r3, #27
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4413      	add	r3, r2
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0d5b      	lsrs	r3, r3, #21
 8000ee4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e00b      	b.n	8000f06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	331b      	adds	r3, #27
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	331b      	adds	r3, #27
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	4413      	add	r3, r2
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0202 	and.w	r2, r3, #2
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	331b      	adds	r3, #27
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	3304      	adds	r3, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2208      	movs	r2, #8
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	e00b      	b.n	8000f54 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	331b      	adds	r3, #27
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	3304      	adds	r3, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 020f 	and.w	r2, r3, #15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	331b      	adds	r3, #27
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	4413      	add	r3, r2
 8000f60:	3304      	adds	r3, #4
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	331b      	adds	r3, #27
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	3304      	adds	r3, #4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0a1a      	lsrs	r2, r3, #8
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0c1a      	lsrs	r2, r3, #16
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	0e1a      	lsrs	r2, r3, #24
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0a1a      	lsrs	r2, r3, #8
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3305      	adds	r3, #5
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0c1a      	lsrs	r2, r3, #16
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	3306      	adds	r3, #6
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4413      	add	r3, r2
 800103e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0e1a      	lsrs	r2, r3, #24
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3307      	adds	r3, #7
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d108      	bne.n	8001066 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	e007      	b.n	8001076 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0220 	orr.w	r2, r2, #32
 8001074:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e006      	b.n	8001088 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d002      	beq.n	80010b2 <HAL_CAN_ActivateNotification+0x1e>
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d109      	bne.n	80010c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6959      	ldr	r1, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e006      	b.n	80010d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
  }
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d07c      	beq.n	8001220 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d023      	beq.n	8001178 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f983 	bl	800144e <HAL_CAN_TxMailbox0CompleteCallback>
 8001148:	e016      	b.n	8001178 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
 800115c:	e00c      	b.n	8001178 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001170:	e002      	b.n	8001178 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f989 	bl	800148a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800118a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f963 	bl	8001462 <HAL_CAN_TxMailbox1CompleteCallback>
 800119c:	e016      	b.n	80011cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b0:	e00c      	b.n	80011cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c4:	e002      	b.n	80011cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f969 	bl	800149e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d024      	beq.n	8001220 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f943 	bl	8001476 <HAL_CAN_TxMailbox2CompleteCallback>
 80011f0:	e016      	b.n	8001220 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
 8001204:	e00c      	b.n	8001220 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
 8001218:	e002      	b.n	8001220 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 f949 	bl	80014b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00c      	beq.n	8001244 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2210      	movs	r2, #16
 8001242:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2208      	movs	r2, #8
 800125e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f930 	bl	80014c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff f992 	bl	80005a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00c      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2210      	movs	r2, #16
 80012a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	f003 0320 	and.w	r3, r3, #32
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2208      	movs	r2, #8
 80012c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f912 	bl	80014ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f8f9 	bl	80014da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2210      	movs	r2, #16
 8001302:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f8fc 	bl	8001502 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00b      	beq.n	800132c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2208      	movs	r2, #8
 8001324:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8f5 	bl	8001516 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d07b      	beq.n	800142e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	2b00      	cmp	r3, #0
 800133e:	d072      	beq.n	8001426 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d008      	beq.n	800135c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f043 0302 	orr.w	r3, r3, #2
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d008      	beq.n	8001394 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001394:	6a3b      	ldr	r3, [r7, #32]
 8001396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800139a:	2b00      	cmp	r3, #0
 800139c:	d043      	beq.n	8001426 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d03e      	beq.n	8001426 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013ae:	2b60      	cmp	r3, #96	@ 0x60
 80013b0:	d02b      	beq.n	800140a <HAL_CAN_IRQHandler+0x32a>
 80013b2:	2b60      	cmp	r3, #96	@ 0x60
 80013b4:	d82e      	bhi.n	8001414 <HAL_CAN_IRQHandler+0x334>
 80013b6:	2b50      	cmp	r3, #80	@ 0x50
 80013b8:	d022      	beq.n	8001400 <HAL_CAN_IRQHandler+0x320>
 80013ba:	2b50      	cmp	r3, #80	@ 0x50
 80013bc:	d82a      	bhi.n	8001414 <HAL_CAN_IRQHandler+0x334>
 80013be:	2b40      	cmp	r3, #64	@ 0x40
 80013c0:	d019      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x316>
 80013c2:	2b40      	cmp	r3, #64	@ 0x40
 80013c4:	d826      	bhi.n	8001414 <HAL_CAN_IRQHandler+0x334>
 80013c6:	2b30      	cmp	r3, #48	@ 0x30
 80013c8:	d010      	beq.n	80013ec <HAL_CAN_IRQHandler+0x30c>
 80013ca:	2b30      	cmp	r3, #48	@ 0x30
 80013cc:	d822      	bhi.n	8001414 <HAL_CAN_IRQHandler+0x334>
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d002      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x2f8>
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d005      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013d6:	e01d      	b.n	8001414 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013e0:	e019      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013ea:	e014      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013f4:	e00f      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013fe:	e00a      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001408:	e005      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001412:	e000      	b.n	8001416 <HAL_CAN_IRQHandler+0x336>
            break;
 8001414:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699a      	ldr	r2, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001424:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2204      	movs	r2, #4
 800142c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800142e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f872 	bl	800152a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	@ (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff3e 	bl	8001588 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff31 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa2 	bl	800169c <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e02e      	b.n	80017d2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800177a:	2b02      	cmp	r3, #2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2204      	movs	r2, #4
 8001782:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e020      	b.n	80017d2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 020e 	bic.w	r2, r2, #14
 800179e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d005      	beq.n	8001800 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2204      	movs	r2, #4
 80017f8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e027      	b.n	8001850 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
    }
  }
  return status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	e14e      	b.n	8001b0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8140 	beq.w	8001b04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d005      	beq.n	800189c <HAL_GPIO_Init+0x40>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b03      	cmp	r3, #3
 8001908:	d017      	beq.n	800193a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d123      	bne.n	800198e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	6939      	ldr	r1, [r7, #16]
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0203 	and.w	r2, r3, #3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 809a 	beq.w	8001b04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	4b55      	ldr	r3, [pc, #340]	@ (8001b28 <HAL_GPIO_Init+0x2cc>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_GPIO_Init+0x2cc>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b52      	ldr	r3, [pc, #328]	@ (8001b28 <HAL_GPIO_Init+0x2cc>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019e8:	4a50      	ldr	r2, [pc, #320]	@ (8001b2c <HAL_GPIO_Init+0x2d0>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a12:	d013      	beq.n	8001a3c <HAL_GPIO_Init+0x1e0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a46      	ldr	r2, [pc, #280]	@ (8001b30 <HAL_GPIO_Init+0x2d4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a45      	ldr	r2, [pc, #276]	@ (8001b34 <HAL_GPIO_Init+0x2d8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1d8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a44      	ldr	r2, [pc, #272]	@ (8001b38 <HAL_GPIO_Init+0x2dc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1d4>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a30:	2305      	movs	r3, #5
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x1e2>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_GPIO_Init+0x2d0>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5c:	4b37      	ldr	r3, [pc, #220]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a80:	4a2e      	ldr	r2, [pc, #184]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aaa:	4a24      	ldr	r2, [pc, #144]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ad4:	4a19      	ldr	r2, [pc, #100]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001afe:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_GPIO_Init+0x2e0>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f aea9 	bne.w	800186c <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43d9      	mvns	r1, r3
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	400b      	ands	r3, r1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f000 bff4 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 816d 	beq.w	8001eba <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be0:	4bb4      	ldr	r3, [pc, #720]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bec:	4bb1      	ldr	r3, [pc, #708]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d157      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x104>
 8001bf8:	4bae      	ldr	r3, [pc, #696]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c04:	d150      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x104>
 8001c06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c26:	d802      	bhi.n	8001c2e <HAL_RCC_OscConfig+0x8a>
 8001c28:	4ba2      	ldr	r3, [pc, #648]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0xb6>
 8001c2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c32:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c46:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c4a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001c56:	4b97      	ldr	r3, [pc, #604]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c5e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001c62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c66:	fa92 f2a2 	rbit	r2, r2
 8001c6a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001c6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001c72:	fab2 f282 	clz	r2, r2
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	f042 0220 	orr.w	r2, r2, #32
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	f002 021f 	and.w	r2, r2, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8114 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x314>
 8001c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 810b 	bne.w	8001eb8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 bf85 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x124>
 8001cba:	4b7e      	ldr	r3, [pc, #504]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e036      	b.n	8001d36 <HAL_RCC_OscConfig+0x192>
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x14e>
 8001cd8:	4b76      	ldr	r3, [pc, #472]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a75      	ldr	r2, [pc, #468]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a72      	ldr	r2, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e021      	b.n	8001d36 <HAL_RCC_OscConfig+0x192>
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d02:	d10c      	bne.n	8001d1e <HAL_RCC_OscConfig+0x17a>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e00b      	b.n	8001d36 <HAL_RCC_OscConfig+0x192>
 8001d1e:	4b65      	ldr	r3, [pc, #404]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a64      	ldr	r2, [pc, #400]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b62      	ldr	r3, [pc, #392]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a61      	ldr	r2, [pc, #388]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3a:	f023 020f 	bic.w	r2, r3, #15
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	495a      	ldr	r1, [pc, #360]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d054      	beq.n	8001e0a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7fe fe08 	bl	8000974 <HAL_GetTick>
 8001d64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fe03 	bl	8000974 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d902      	bls.n	8001d80 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f000 bf19 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8001d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d84:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001d94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001da0:	d802      	bhi.n	8001da8 <HAL_RCC_OscConfig+0x204>
 8001da2:	4b44      	ldr	r3, [pc, #272]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e015      	b.n	8001dd4 <HAL_RCC_OscConfig+0x230>
 8001da8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dac:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dc0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001dc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dd8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ddc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001de0:	fa92 f2a2 	rbit	r2, r2
 8001de4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001de8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0b0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1c6>
 8001e08:	e057      	b.n	8001eba <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7fe fdb3 	bl	8000974 <HAL_GetTick>
 8001e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e14:	f7fe fdae 	bl	8000974 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	@ 0x64
 8001e22:	d902      	bls.n	8001e2a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f000 bec4 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8001e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e2e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001e3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e4a:	d802      	bhi.n	8001e52 <HAL_RCC_OscConfig+0x2ae>
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x2da>
 8001e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e56:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e6a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_RCC_OscConfig+0x310>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e82:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001e86:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001e92:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	f042 0220 	orr.w	r2, r2, #32
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f002 021f 	and.w	r2, r2, #31
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1b0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x270>
 8001eb2:	e002      	b.n	8001eba <HAL_RCC_OscConfig+0x316>
 8001eb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 816c 	beq.w	80021a8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ed0:	4bcc      	ldr	r3, [pc, #816]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001edc:	4bc9      	ldr	r3, [pc, #804]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d16d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x420>
 8001ee8:	4bc6      	ldr	r3, [pc, #792]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d167      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x420>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001f06:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	fab3 f383 	clz	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f12:	d802      	bhi.n	8001f1a <HAL_RCC_OscConfig+0x376>
 8001f14:	4bbb      	ldr	r3, [pc, #748]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	e013      	b.n	8001f42 <HAL_RCC_OscConfig+0x39e>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f32:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001f3e:	4bb1      	ldr	r3, [pc, #708]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	2202      	movs	r2, #2
 8001f44:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001f48:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f4c:	fa92 f2a2 	rbit	r2, r2
 8001f50:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001f54:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f042 0220 	orr.w	r2, r2, #32
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f002 021f 	and.w	r2, r2, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3e6>
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d002      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f000 be14 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	21f8      	movs	r1, #248	@ 0xf8
 8001fa0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001fa8:	fa91 f1a1 	rbit	r1, r1
 8001fac:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001fb0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001fb4:	fab1 f181 	clz	r1, r1
 8001fb8:	b2c9      	uxtb	r1, r1
 8001fba:	408b      	lsls	r3, r1
 8001fbc:	4991      	ldr	r1, [pc, #580]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e0f1      	b.n	80021a8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 8083 	beq.w	80020dc <HAL_RCC_OscConfig+0x538>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001fe8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ff6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe fcb7 	bl	8000974 <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200c:	f7fe fcb2 	bl	8000974 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d902      	bls.n	8002022 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	f000 bdc8 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002034:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002040:	d802      	bhi.n	8002048 <HAL_RCC_OscConfig+0x4a4>
 8002042:	4b70      	ldr	r3, [pc, #448]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	e013      	b.n	8002070 <HAL_RCC_OscConfig+0x4cc>
 8002048:	2302      	movs	r3, #2
 800204a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002060:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800206c:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	2202      	movs	r2, #2
 8002072:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002076:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002082:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0b4      	beq.n	800200c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b58      	ldr	r3, [pc, #352]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	21f8      	movs	r1, #248	@ 0xf8
 80020b8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80020c0:	fa91 f1a1 	rbit	r1, r1
 80020c4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80020c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80020cc:	fab1 f181 	clz	r1, r1
 80020d0:	b2c9      	uxtb	r1, r1
 80020d2:	408b      	lsls	r3, r1
 80020d4:	494b      	ldr	r1, [pc, #300]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
 80020da:	e065      	b.n	80021a8 <HAL_RCC_OscConfig+0x604>
 80020dc:	2301      	movs	r3, #1
 80020de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80020ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	461a      	mov	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fc34 	bl	8000974 <HAL_GetTick>
 800210c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7fe fc2f 	bl	8000974 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d902      	bls.n	8002128 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	f000 bd45 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800213a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b3f      	cmp	r3, #63	@ 0x3f
 8002146:	d802      	bhi.n	800214e <HAL_RCC_OscConfig+0x5aa>
 8002148:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e013      	b.n	8002176 <HAL_RCC_OscConfig+0x5d2>
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002166:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <HAL_RCC_OscConfig+0x660>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2202      	movs	r2, #2
 8002178:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800217c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002180:	fa92 f2a2 	rbit	r2, r2
 8002184:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002188:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f042 0220 	orr.w	r2, r2, #32
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1b4      	bne.n	8002112 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8115 	beq.w	80023e8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d07e      	beq.n	80022cc <HAL_RCC_OscConfig+0x728>
 80021ce:	2301      	movs	r3, #1
 80021d0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80021e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_RCC_OscConfig+0x664>)
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	2301      	movs	r3, #1
 80021f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe fbbc 	bl	8000974 <HAL_GetTick>
 80021fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	e00f      	b.n	8002222 <HAL_RCC_OscConfig+0x67e>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800220c:	f7fe fbb2 	bl	8000974 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d902      	bls.n	8002222 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	f000 bcc8 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002238:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	fa93 f2a3 	rbit	r2, r3
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002276:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800227a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227c:	4bb0      	ldr	r3, [pc, #704]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 800227e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002284:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002288:	2102      	movs	r1, #2
 800228a:	6019      	str	r1, [r3, #0]
 800228c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002290:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f1a3 	rbit	r1, r3
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022a2:	6019      	str	r1, [r3, #0]
  return result;
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2101      	movs	r1, #1
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0a0      	beq.n	800220c <HAL_RCC_OscConfig+0x668>
 80022ca:	e08d      	b.n	80023e8 <HAL_RCC_OscConfig+0x844>
 80022cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ee:	601a      	str	r2, [r3, #0]
  return result;
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4b90      	ldr	r3, [pc, #576]	@ (8002544 <HAL_RCC_OscConfig+0x9a0>)
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2300      	movs	r3, #0
 800230c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fb31 	bl	8000974 <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe fb2c 	bl	8000974 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d902      	bls.n	800232e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	f000 bc42 	b.w	8002bb2 <HAL_RCC_OscConfig+0x100e>
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002336:	2202      	movs	r2, #2
 8002338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fa93 f2a3 	rbit	r2, r3
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800235a:	2202      	movs	r2, #2
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	fa93 f2a3 	rbit	r2, r3
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800237e:	2202      	movs	r2, #2
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002398:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239a:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 800239c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023a6:	2102      	movs	r1, #2
 80023a8:	6019      	str	r1, [r3, #0]
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	fa93 f1a3 	rbit	r1, r3
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023c0:	6019      	str	r1, [r3, #0]
  return result;
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	4013      	ands	r3, r2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d197      	bne.n	8002318 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 819e 	beq.w	800273a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002404:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d116      	bne.n	800243e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a4a      	ldr	r2, [pc, #296]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b48      	ldr	r3, [pc, #288]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002436:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b42      	ldr	r3, [pc, #264]	@ (8002548 <HAL_RCC_OscConfig+0x9a4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d11a      	bne.n	8002480 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244a:	4b3f      	ldr	r3, [pc, #252]	@ (8002548 <HAL_RCC_OscConfig+0x9a4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3e      	ldr	r2, [pc, #248]	@ (8002548 <HAL_RCC_OscConfig+0x9a4>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002454:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7fe fa8d 	bl	8000974 <HAL_GetTick>
 800245a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245e:	e009      	b.n	8002474 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002460:	f7fe fa88 	bl	8000974 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	@ 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e39e      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <HAL_RCC_OscConfig+0x9a4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ef      	beq.n	8002460 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x8fa>
 8002490:	4b2b      	ldr	r3, [pc, #172]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a2a      	ldr	r2, [pc, #168]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	e035      	b.n	800250a <HAL_RCC_OscConfig+0x966>
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x924>
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	4b21      	ldr	r3, [pc, #132]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	4a20      	ldr	r2, [pc, #128]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024c0:	f023 0304 	bic.w	r3, r3, #4
 80024c4:	6213      	str	r3, [r2, #32]
 80024c6:	e020      	b.n	800250a <HAL_RCC_OscConfig+0x966>
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x94e>
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a15      	ldr	r2, [pc, #84]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x966>
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <HAL_RCC_OscConfig+0x99c>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8087 	beq.w	800262a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fa2a 	bl	8000974 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	e012      	b.n	800254c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe fa25 	bl	8000974 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d908      	bls.n	800254c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e339      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	10908120 	.word	0x10908120
 8002548:	40007000 	.word	0x40007000
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002578:	2202      	movs	r2, #2
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002592:	601a      	str	r2, [r3, #0]
  return result;
 8002594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002598:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800259c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_OscConfig+0xa10>
 80025ae:	4b98      	ldr	r3, [pc, #608]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	e013      	b.n	80025dc <HAL_RCC_OscConfig+0xa38>
 80025b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025bc:	2202      	movs	r2, #2
 80025be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025e4:	2102      	movs	r1, #2
 80025e6:	6011      	str	r1, [r2, #0]
 80025e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	fa92 f1a2 	rbit	r1, r2
 80025f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025fa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025fe:	6011      	str	r1, [r2, #0]
  return result;
 8002600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002604:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	f43f af7f 	beq.w	8002526 <HAL_RCC_OscConfig+0x982>
 8002628:	e07d      	b.n	8002726 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7fe f9a3 	bl	8000974 <HAL_GetTick>
 800262e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe f99e 	bl	8000974 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e2b2      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002654:	2202      	movs	r2, #2
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002678:	2202      	movs	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800269c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0xb10>
 80026ae:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	e013      	b.n	80026dc <HAL_RCC_OscConfig+0xb38>
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026bc:	2202      	movs	r2, #2
 80026be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026e4:	2102      	movs	r1, #2
 80026e6:	6011      	str	r1, [r2, #0]
 80026e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ec:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	fa92 f1a2 	rbit	r1, r2
 80026f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026fa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026fe:	6011      	str	r1, [r2, #0]
  return result;
 8002700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002704:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d186      	bne.n	8002634 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002726:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a37      	ldr	r2, [pc, #220]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8232 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	f000 8201 	beq.w	8002b5c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b02      	cmp	r3, #2
 8002768:	f040 8157 	bne.w	8002a1a <HAL_RCC_OscConfig+0xe76>
 800276c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002770:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002774:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002790:	601a      	str	r2, [r3, #0]
  return result;
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800279a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	461a      	mov	r2, r3
 80027ae:	2300      	movs	r3, #0
 80027b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe f8df 	bl	8000974 <HAL_GetTick>
 80027b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	e009      	b.n	80027d0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe f8da 	bl	8000974 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1f0      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f2a3 	rbit	r2, r3
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027f4:	601a      	str	r2, [r3, #0]
  return result;
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b3f      	cmp	r3, #63	@ 0x3f
 8002808:	d804      	bhi.n	8002814 <HAL_RCC_OscConfig+0xc70>
 800280a:	4b01      	ldr	r3, [pc, #4]	@ (8002810 <HAL_RCC_OscConfig+0xc6c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e029      	b.n	8002864 <HAL_RCC_OscConfig+0xcc0>
 8002810:	40021000 	.word	0x40021000
 8002814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002818:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800281c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002826:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002842:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	fa93 f2a3 	rbit	r2, r3
 8002856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	4bc3      	ldr	r3, [pc, #780]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002868:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800286c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002876:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	fa92 f1a2 	rbit	r1, r2
 8002880:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002884:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002888:	6011      	str	r1, [r2, #0]
  return result;
 800288a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d185      	bne.n	80027bc <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b0:	4baf      	ldr	r3, [pc, #700]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	49a7      	ldr	r1, [pc, #668]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028fc:	601a      	str	r2, [r3, #0]
  return result;
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002906:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002912:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	461a      	mov	r2, r3
 800291a:	2301      	movs	r3, #1
 800291c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe f829 	bl	8000974 <HAL_GetTick>
 8002922:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002926:	e009      	b.n	800293c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe f824 	bl	8000974 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e13a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 800293c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002940:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002944:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	fa93 f2a3 	rbit	r2, r3
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002960:	601a      	str	r2, [r3, #0]
  return result;
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800296a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b3f      	cmp	r3, #63	@ 0x3f
 8002974:	d802      	bhi.n	800297c <HAL_RCC_OscConfig+0xdd8>
 8002976:	4b7e      	ldr	r3, [pc, #504]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e027      	b.n	80029cc <HAL_RCC_OscConfig+0xe28>
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002984:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029d0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029d8:	6011      	str	r1, [r2, #0]
 80029da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029de:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	fa92 f1a2 	rbit	r1, r2
 80029e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ec:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029f0:	6011      	str	r1, [r2, #0]
  return result;
 80029f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029f6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f042 0220 	orr.w	r2, r2, #32
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f002 021f 	and.w	r2, r2, #31
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d087      	beq.n	8002928 <HAL_RCC_OscConfig+0xd84>
 8002a18:	e0ca      	b.n	8002bb0 <HAL_RCC_OscConfig+0x100c>
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a3e:	601a      	str	r2, [r3, #0]
  return result;
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a54:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fd ff88 	bl	8000974 <HAL_GetTick>
 8002a64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fd ff83 	bl	8000974 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e099      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fa93 f2a3 	rbit	r2, r3
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002aa2:	601a      	str	r2, [r3, #0]
  return result;
 8002aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002aac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab6:	d802      	bhi.n	8002abe <HAL_RCC_OscConfig+0xf1a>
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	e027      	b.n	8002b0e <HAL_RCC_OscConfig+0xf6a>
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ac6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	fa93 f2a3 	rbit	r2, r3
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002aec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	fa93 f2a3 	rbit	r2, r3
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	4b19      	ldr	r3, [pc, #100]	@ (8002b70 <HAL_RCC_OscConfig+0xfcc>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b12:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b16:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b1a:	6011      	str	r1, [r2, #0]
 8002b1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b20:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	fa92 f1a2 	rbit	r1, r2
 8002b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b32:	6011      	str	r1, [r2, #0]
  return result;
 8002b34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b38:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	fab2 f282 	clz	r2, r2
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f042 0220 	orr.w	r2, r2, #32
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f002 021f 	and.w	r2, r2, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d187      	bne.n	8002a6a <HAL_RCC_OscConfig+0xec6>
 8002b5a:	e029      	b.n	8002bb0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d103      	bne.n	8002b74 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e020      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
 8002b70:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_RCC_OscConfig+0x1018>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b98:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b09e      	sub	sp, #120	@ 0x78
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e154      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b89      	ldr	r3, [pc, #548]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b86      	ldr	r3, [pc, #536]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4984      	ldr	r1, [pc, #528]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b82      	ldr	r3, [pc, #520]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e13c      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b7b      	ldr	r3, [pc, #492]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4978      	ldr	r1, [pc, #480]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80cd 	beq.w	8002dce <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d137      	bne.n	8002cac <HAL_RCC_ClockConfig+0xec>
 8002c3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c40:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c54:	d802      	bhi.n	8002c5c <HAL_RCC_ClockConfig+0x9c>
 8002c56:	4b6b      	ldr	r3, [pc, #428]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_ClockConfig+0xbc>
 8002c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c78:	4b62      	ldr	r3, [pc, #392]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c84:	fa92 f2a2 	rbit	r2, r2
 8002c88:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002c8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c8c:	fab2 f282 	clz	r2, r2
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f002 021f 	and.w	r2, r2, #31
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d171      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0ea      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d137      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x164>
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ccc:	d802      	bhi.n	8002cd4 <HAL_RCC_ClockConfig+0x114>
 8002cce:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_ClockConfig+0x134>
 8002cd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf0:	4b44      	ldr	r3, [pc, #272]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cfc:	fa92 f2a2 	rbit	r2, r2
 8002d00:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d135      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ae      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
 8002d24:	2302      	movs	r3, #2
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d3a:	d802      	bhi.n	8002d42 <HAL_RCC_ClockConfig+0x182>
 8002d3c:	4b31      	ldr	r3, [pc, #196]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e00d      	b.n	8002d5e <HAL_RCC_ClockConfig+0x19e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4e:	2302      	movs	r3, #2
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	2202      	movs	r2, #2
 8002d60:	61ba      	str	r2, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	fa92 f2a2 	rbit	r2, r2
 8002d68:	617a      	str	r2, [r7, #20]
  return result;
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	f042 0220 	orr.w	r2, r2, #32
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f002 021f 	and.w	r2, r2, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e07a      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 0203 	bic.w	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	491a      	ldr	r1, [pc, #104]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9e:	f7fd fde9 	bl	8000974 <HAL_GetTick>
 8002da2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da6:	f7fd fde5 	bl	8000974 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e062      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbc:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 020c 	and.w	r2, r3, #12
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d1eb      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dce:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d215      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ddc:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 0207 	bic.w	r2, r3, #7
 8002de4:	4906      	ldr	r1, [pc, #24]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dec:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <HAL_RCC_ClockConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d006      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e041      	b.n	8002e82 <HAL_RCC_ClockConfig+0x2c2>
 8002dfe:	bf00      	nop
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e14:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_ClockConfig+0x2cc>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	491a      	ldr	r1, [pc, #104]	@ (8002e8c <HAL_RCC_ClockConfig+0x2cc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e32:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <HAL_RCC_ClockConfig+0x2cc>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4912      	ldr	r1, [pc, #72]	@ (8002e8c <HAL_RCC_ClockConfig+0x2cc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e46:	f000 f829 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <HAL_RCC_ClockConfig+0x2cc>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e54:	22f0      	movs	r2, #240	@ 0xf0
 8002e56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	fa92 f2a2 	rbit	r2, r2
 8002e5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	fab2 f282 	clz	r2, r2
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	40d3      	lsrs	r3, r2
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <HAL_RCC_ClockConfig+0x2d0>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e72:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <HAL_RCC_ClockConfig+0x2d4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_RCC_ClockConfig+0x2d8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fd36 	bl	80008ec <HAL_InitTick>
  
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3778      	adds	r7, #120	@ 0x78
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	080041c0 	.word	0x080041c0
 8002e94:	20000000 	.word	0x20000000
 8002e98:	20000004 	.word	0x20000004

08002e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x30>
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eca:	e026      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ece:	613b      	str	r3, [r7, #16]
      break;
 8002ed0:	e026      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0c9b      	lsrs	r3, r3, #18
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002edc:	5cd3      	ldrb	r3, [r2, r3]
 8002ede:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ee0:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e004      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
      break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f1c:	613b      	str	r3, [r7, #16]
      break;
 8002f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f20:	693b      	ldr	r3, [r7, #16]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	080041d8 	.word	0x080041d8
 8002f3c:	080041e8 	.word	0x080041e8
 8002f40:	003d0900 	.word	0x003d0900
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f66:	f7ff ffef 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f6a:	4601      	mov	r1, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002f78:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	fa92 f2a2 	rbit	r2, r2
 8002f80:	603a      	str	r2, [r7, #0]
  return result;
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	40d3      	lsrs	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	080041d0 	.word	0x080041d0

08002fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002faa:	f7ff ffcd 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002fb8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002fbc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	603a      	str	r2, [r7, #0]
  return result;
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	40d3      	lsrs	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	080041d0 	.word	0x080041d0

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b092      	sub	sp, #72	@ 0x48
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80cb 	beq.w	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b85      	ldr	r3, [pc, #532]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10e      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b82      	ldr	r3, [pc, #520]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4a81      	ldr	r2, [pc, #516]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003022:	61d3      	str	r3, [r2, #28]
 8003024:	4b7f      	ldr	r3, [pc, #508]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b7c      	ldr	r3, [pc, #496]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b79      	ldr	r3, [pc, #484]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a78      	ldr	r2, [pc, #480]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fd fc91 	bl	8000974 <HAL_GetTick>
 8003052:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fd fc8d 	bl	8000974 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	@ 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0d9      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b6f      	ldr	r3, [pc, #444]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003074:	4b6b      	ldr	r3, [pc, #428]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800307e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d07b      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800308e:	429a      	cmp	r2, r3
 8003090:	d074      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003092:	4b64      	ldr	r3, [pc, #400]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800309a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800309c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b5d      	ldr	r3, [pc, #372]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	461a      	mov	r2, r3
 80030bc:	2301      	movs	r3, #1
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b54      	ldr	r3, [pc, #336]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80030e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d043      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fd fc3e 	bl	8000974 <HAL_GetTick>
 80030f8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fd fc3a 	bl	8000974 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e084      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003112:	2302      	movs	r3, #2
 8003114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	627b      	str	r3, [r7, #36]	@ 0x24
 800311e:	2302      	movs	r3, #2
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	61fb      	str	r3, [r7, #28]
  return result;
 800312a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800313c:	4b39      	ldr	r3, [pc, #228]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	e007      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003142:	2302      	movs	r3, #2
 8003144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	2202      	movs	r2, #2
 8003154:	613a      	str	r2, [r7, #16]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	fa92 f2a2 	rbit	r2, r2
 800315c:	60fa      	str	r2, [r7, #12]
  return result;
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0bf      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800317c:	4b29      	ldr	r3, [pc, #164]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4926      	ldr	r1, [pc, #152]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800318e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b23      	ldr	r3, [pc, #140]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a22      	ldr	r2, [pc, #136]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	491a      	ldr	r1, [pc, #104]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	f023 0210 	bic.w	r2, r3, #16
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4912      	ldr	r1, [pc, #72]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	490b      	ldr	r1, [pc, #44]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	4903      	ldr	r1, [pc, #12]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3748      	adds	r7, #72	@ 0x48
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
 800322c:	10908100 	.word	0x10908100

08003230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e040      	b.n	80032c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fa36 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fcee 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fbb5 	bl	80039ec <UART_SetConfig>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e01b      	b.n	80032c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800329a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fd6d 	bl	8003d9c <UART_CheckIdleState>
 80032c2:	4603      	mov	r3, r0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d177      	bne.n	80033d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Transmit+0x24>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e070      	b.n	80033d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2221      	movs	r2, #33	@ 0x21
 8003300:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003302:	f7fd fb37 	bl	8000974 <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003320:	d108      	bne.n	8003334 <HAL_UART_Transmit+0x68>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d104      	bne.n	8003334 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	e003      	b.n	800333c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800333c:	e02f      	b.n	800339e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	2180      	movs	r1, #128	@ 0x80
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fdcf 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e03b      	b.n	80033d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	b292      	uxth	r2, r2
 8003372:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	3302      	adds	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e007      	b.n	800338c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1c9      	bne.n	800333e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2140      	movs	r1, #64	@ 0x40
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fd99 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e005      	b.n	80033d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0ba      	sub	sp, #232	@ 0xe8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003406:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800340a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800340e:	4013      	ands	r3, r2
 8003410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d115      	bne.n	8003448 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800341c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 82ab 	beq.w	8003994 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
      }
      return;
 8003446:	e2a5      	b.n	8003994 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 8117 	beq.w	8003680 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800345e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003462:	4b85      	ldr	r3, [pc, #532]	@ (8003678 <HAL_UART_IRQHandler+0x298>)
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 810a 	beq.w	8003680 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d011      	beq.n	800349c <HAL_UART_IRQHandler+0xbc>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2201      	movs	r2, #1
 800348a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800349c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d011      	beq.n	80034cc <HAL_UART_IRQHandler+0xec>
 80034a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00b      	beq.n	80034cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2202      	movs	r2, #2
 80034ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034c2:	f043 0204 	orr.w	r2, r3, #4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d011      	beq.n	80034fc <HAL_UART_IRQHandler+0x11c>
 80034d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2204      	movs	r2, #4
 80034ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f2:	f043 0202 	orr.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003518:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2208      	movs	r2, #8
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_UART_IRQHandler+0x18a>
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003548:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8211 	beq.w	8003998 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b40      	cmp	r3, #64	@ 0x40
 80035b4:	d005      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04f      	beq.n	8003662 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fcff 	bl	8003fc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d141      	bne.n	800365a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3308      	adds	r3, #8
 80035dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3308      	adds	r3, #8
 80035fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003602:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800360e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800361a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1d9      	bne.n	80035d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362e:	4a13      	ldr	r2, [pc, #76]	@ (800367c <HAL_UART_IRQHandler+0x29c>)
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe f8d1 	bl	80017de <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d017      	beq.n	8003672 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00f      	b.n	8003672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9b4 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e00b      	b.n	8003672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9b0 	bl	80039c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e007      	b.n	8003672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9ac 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003670:	e192      	b.n	8003998 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003672:	bf00      	nop
    return;
 8003674:	e190      	b.n	8003998 <HAL_UART_IRQHandler+0x5b8>
 8003676:	bf00      	nop
 8003678:	04000120 	.word	0x04000120
 800367c:	0800408f 	.word	0x0800408f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	2b01      	cmp	r3, #1
 8003686:	f040 814b 	bne.w	8003920 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8144 	beq.w	8003920 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 813d 	beq.w	8003920 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2210      	movs	r2, #16
 80036ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	f040 80b5 	bne.w	8003828 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8164 	beq.w	800399c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036de:	429a      	cmp	r2, r3
 80036e0:	f080 815c 	bcs.w	800399c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	f000 8086 	beq.w	8003806 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800370e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003716:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003724:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003728:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003730:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800373c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1da      	bne.n	80036fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3308      	adds	r3, #8
 800374a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003768:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800376c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003770:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800377a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e1      	bne.n	8003744 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3308      	adds	r3, #8
 80037a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e3      	bne.n	8003780 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e4      	bne.n	80037c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd ffae 	bl	8001762 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8d7 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003826:	e0b9      	b.n	800399c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003834:	b29b      	uxth	r3, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ab 	beq.w	80039a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800384a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80a6 	beq.w	80039a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003868:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003876:	647b      	str	r3, [r7, #68]	@ 0x44
 8003878:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800387c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e4      	bne.n	8003854 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3308      	adds	r3, #8
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	623b      	str	r3, [r7, #32]
   return(result);
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3308      	adds	r3, #8
 80038aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e3      	bne.n	800388a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0310 	bic.w	r3, r3, #16
 80038ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	617b      	str	r3, [r7, #20]
   return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e4      	bne.n	80038d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003912:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f85b 	bl	80039d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800391e:	e03f      	b.n	80039a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <HAL_UART_IRQHandler+0x56a>
 800392c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fbe3 	bl	800410e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003948:	e02d      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01c      	beq.n	80039a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
    }
    return;
 8003972:	e017      	b.n	80039a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d012      	beq.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
 8003980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00c      	beq.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fb94 	bl	80040ba <UART_EndTransmit_IT>
    return;
 8003992:	e008      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003994:	bf00      	nop
 8003996:	e006      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003998:	bf00      	nop
 800399a:	e004      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80039a4:	bf00      	nop
  }

}
 80039a6:	37e8      	adds	r7, #232	@ 0xe8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b8a      	ldr	r3, [pc, #552]	@ (8003c40 <UART_SetConfig+0x254>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a78      	ldr	r2, [pc, #480]	@ (8003c44 <UART_SetConfig+0x258>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d120      	bne.n	8003aaa <UART_SetConfig+0xbe>
 8003a68:	4b77      	ldr	r3, [pc, #476]	@ (8003c48 <UART_SetConfig+0x25c>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d817      	bhi.n	8003aa4 <UART_SetConfig+0xb8>
 8003a74:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <UART_SetConfig+0x90>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003a9f 	.word	0x08003a9f
 8003a88:	08003a93 	.word	0x08003a93
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e01d      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e01a      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e017      	b.n	8003ace <UART_SetConfig+0xe2>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e014      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e011      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a67      	ldr	r2, [pc, #412]	@ (8003c4c <UART_SetConfig+0x260>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d102      	bne.n	8003aba <UART_SetConfig+0xce>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e009      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a64      	ldr	r2, [pc, #400]	@ (8003c50 <UART_SetConfig+0x264>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d102      	bne.n	8003aca <UART_SetConfig+0xde>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e001      	b.n	8003ace <UART_SetConfig+0xe2>
 8003aca:	2310      	movs	r3, #16
 8003acc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad6:	d15a      	bne.n	8003b8e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x142>
 8003ade:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae4 <UART_SetConfig+0xf8>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7ff fa2a 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e013      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7ff fa48 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b4e      	ldr	r3, [pc, #312]	@ (8003c54 <UART_SetConfig+0x268>)
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e00c      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7ff f9bd 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8003b22:	61b8      	str	r0, [r7, #24]
        break;
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77bb      	strb	r3, [r7, #30]
        break;
 8003b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d074      	beq.n	8003c28 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	005a      	lsls	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	441a      	add	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d916      	bls.n	8003b88 <UART_SetConfig+0x19c>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d212      	bcs.n	8003b88 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f023 030f 	bic.w	r3, r3, #15
 8003b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	89fa      	ldrh	r2, [r7, #14]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	e04f      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77bb      	strb	r3, [r7, #30]
 8003b8c:	e04c      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d828      	bhi.n	8003be6 <UART_SetConfig+0x1fa>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <UART_SetConfig+0x1b0>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bd1 	.word	0x08003bd1
 8003ba8:	08003be7 	.word	0x08003be7
 8003bac:	08003bd7 	.word	0x08003bd7
 8003bb0:	08003be7 	.word	0x08003be7
 8003bb4:	08003be7 	.word	0x08003be7
 8003bb8:	08003be7 	.word	0x08003be7
 8003bbc:	08003bdf 	.word	0x08003bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7ff f9ce 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	61b8      	str	r0, [r7, #24]
        break;
 8003bc6:	e013      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7ff f9ec 	bl	8002fa4 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e00f      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd0:	4b20      	ldr	r3, [pc, #128]	@ (8003c54 <UART_SetConfig+0x268>)
 8003bd2:	61bb      	str	r3, [r7, #24]
        break;
 8003bd4:	e00c      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bd6:	f7ff f961 	bl	8002e9c <HAL_RCC_GetSysClockFreq>
 8003bda:	61b8      	str	r0, [r7, #24]
        break;
 8003bdc:	e008      	b.n	8003bf0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be2:	61bb      	str	r3, [r7, #24]
        break;
 8003be4:	e004      	b.n	8003bf0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	77bb      	strb	r3, [r7, #30]
        break;
 8003bee:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085a      	lsrs	r2, r3, #1
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b0f      	cmp	r3, #15
 8003c0e:	d909      	bls.n	8003c24 <UART_SetConfig+0x238>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c16:	d205      	bcs.n	8003c24 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	e001      	b.n	8003c28 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	efff69f3 	.word	0xefff69f3
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40004400 	.word	0x40004400
 8003c50:	40004800 	.word	0x40004800
 8003c54:	007a1200 	.word	0x007a1200

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b098      	sub	sp, #96	@ 0x60
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fc fde2 	bl	8000974 <HAL_GetTick>
 8003db0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d12e      	bne.n	8003e1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88c 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e062      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d149      	bne.n	8003ec0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f856 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03c      	beq.n	8003ec0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	623b      	str	r3, [r7, #32]
   return(result);
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3758      	adds	r7, #88	@ 0x58
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e04f      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d04b      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fc fd35 	bl	8000974 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e04e      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d037      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b80      	cmp	r3, #128	@ 0x80
 8003f32:	d034      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d031      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d110      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f838 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e029      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f78:	d111      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f81e 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d0a0      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b095      	sub	sp, #84	@ 0x54
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004038:	2b01      	cmp	r3, #1
 800403a:	d118      	bne.n	800406e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	60bb      	str	r3, [r7, #8]
   return(result);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0310 	bic.w	r3, r3, #16
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004082:	bf00      	nop
 8004084:	3754      	adds	r7, #84	@ 0x54
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff fc87 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fc53 	bl	80039ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <memset>:
 8004122:	4402      	add	r2, r0
 8004124:	4603      	mov	r3, r0
 8004126:	4293      	cmp	r3, r2
 8004128:	d100      	bne.n	800412c <memset+0xa>
 800412a:	4770      	bx	lr
 800412c:	f803 1b01 	strb.w	r1, [r3], #1
 8004130:	e7f9      	b.n	8004126 <memset+0x4>
	...

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4d0d      	ldr	r5, [pc, #52]	@ (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	@ (8004170 <__libc_init_array+0x3c>)
 800413a:	1b64      	subs	r4, r4, r5
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2600      	movs	r6, #0
 8004140:	42a6      	cmp	r6, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	@ (8004178 <__libc_init_array+0x44>)
 8004148:	f000 f818 	bl	800417c <_init>
 800414c:	1b64      	subs	r4, r4, r5
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2600      	movs	r6, #0
 8004152:	42a6      	cmp	r6, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f855 3b04 	ldr.w	r3, [r5], #4
 800415c:	4798      	blx	r3
 800415e:	3601      	adds	r6, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f855 3b04 	ldr.w	r3, [r5], #4
 8004166:	4798      	blx	r3
 8004168:	3601      	adds	r6, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080041f8 	.word	0x080041f8
 8004170:	080041f8 	.word	0x080041f8
 8004174:	080041f8 	.word	0x080041f8
 8004178:	080041fc 	.word	0x080041fc

0800417c <_init>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	bf00      	nop
 8004180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004182:	bc08      	pop	{r3}
 8004184:	469e      	mov	lr, r3
 8004186:	4770      	bx	lr

08004188 <_fini>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr
