
20250701_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004030  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080041b8  080041b8  000051b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f0  080041f0  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080041f0  080041f0  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080041f0  080041f0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f0  080041f0  000051f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041f4  080041f4  000051f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080041f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000001a4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b0  200001b0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf88  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5d  00000000  00000000  00011fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  00013d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069f  00000000  00000000  000145d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2a1  00000000  00000000  00014c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8dc  00000000  00000000  0002ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099bcf  00000000  00000000  0003a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d43bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002280  00000000  00000000  000d4400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  000d6680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041a0 	.word	0x080041a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080041a0 	.word	0x080041a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb79 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f877 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f985 	bl	80004e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f953 	bl	8000484 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f8c9 	bl	8000374 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f91f 	bl	8000424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 80001e6:	4833      	ldr	r0, [pc, #204]	@ (80002b4 <main+0xec>)
 80001e8:	f000 fdbb 	bl	8000d62 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001ec:	2102      	movs	r1, #2
 80001ee:	4831      	ldr	r0, [pc, #196]	@ (80002b4 <main+0xec>)
 80001f0:	f000 ffed 	bl	80011ce <HAL_CAN_ActivateNotification>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <main+0x36>
  {
 	  Error_Handler();
 80001fa:	f000 f9ef 	bl	80005dc <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(50); // C610の制御周期は通常20ms（50Hz）なので、それに合わせる
 80001fe:	2032      	movs	r0, #50	@ 0x32
 8000200:	f000 fbc6 	bl	8000990 <HAL_Delay>

    // 16ビットのトルク指令値（モーター1, 2, 3, 4）
    int16_t motor1_torque = 10000;  // 例: 5000のトルクをモーター1に指示
 8000204:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000208:	80fb      	strh	r3, [r7, #6]
    int16_t motor2_torque = 0;     // モーター2は停止
 800020a:	2300      	movs	r3, #0
 800020c:	80bb      	strh	r3, [r7, #4]
    int16_t motor3_torque = -5000; // 例: -5000のトルクをモーター3に指示
 800020e:	f64e 4378 	movw	r3, #60536	@ 0xec78
 8000212:	807b      	strh	r3, [r7, #2]
    int16_t motor4_torque = 0;     // モーター4は停止
 8000214:	2300      	movs	r3, #0
 8000216:	803b      	strh	r3, [r7, #0]

    // CAN送信ヘッダの設定
    TxHeader.StdId = 0x200; // モーター1〜4を制御するID
 8000218:	4b27      	ldr	r3, [pc, #156]	@ (80002b8 <main+0xf0>)
 800021a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800021e:	601a      	str	r2, [r3, #0]
    TxHeader.RTR = CAN_RTR_DATA;
 8000220:	4b25      	ldr	r3, [pc, #148]	@ (80002b8 <main+0xf0>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 8000226:	4b24      	ldr	r3, [pc, #144]	@ (80002b8 <main+0xf0>)
 8000228:	2200      	movs	r2, #0
 800022a:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;       // データ長は8バイト
 800022c:	4b22      	ldr	r3, [pc, #136]	@ (80002b8 <main+0xf0>)
 800022e:	2208      	movs	r2, #8
 8000230:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000232:	4b21      	ldr	r3, [pc, #132]	@ (80002b8 <main+0xf0>)
 8000234:	2200      	movs	r2, #0
 8000236:	751a      	strb	r2, [r3, #20]

    // CAN送信データの準備
    // トルク指令値をリトルエンディアンでTxDataに格納する
    TxData[0] = (uint8_t)(motor1_torque >> 8);  // モーター1のトルク上位8ビット
 8000238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800023c:	121b      	asrs	r3, r3, #8
 800023e:	b21b      	sxth	r3, r3
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b1e      	ldr	r3, [pc, #120]	@ (80002bc <main+0xf4>)
 8000244:	701a      	strb	r2, [r3, #0]
    TxData[1] = (uint8_t)(motor1_torque & 0xFF); // モーター1のトルク下位8ビット
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b1c      	ldr	r3, [pc, #112]	@ (80002bc <main+0xf4>)
 800024c:	705a      	strb	r2, [r3, #1]
    TxData[2] = (uint8_t)(motor2_torque >> 8);
 800024e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000252:	121b      	asrs	r3, r3, #8
 8000254:	b21b      	sxth	r3, r3
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <main+0xf4>)
 800025a:	709a      	strb	r2, [r3, #2]
    TxData[3] = (uint8_t)(motor2_torque & 0xFF);
 800025c:	88bb      	ldrh	r3, [r7, #4]
 800025e:	b2da      	uxtb	r2, r3
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <main+0xf4>)
 8000262:	70da      	strb	r2, [r3, #3]
    TxData[4] = (uint8_t)(motor3_torque >> 8);
 8000264:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000268:	121b      	asrs	r3, r3, #8
 800026a:	b21b      	sxth	r3, r3
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b13      	ldr	r3, [pc, #76]	@ (80002bc <main+0xf4>)
 8000270:	711a      	strb	r2, [r3, #4]
    TxData[5] = (uint8_t)(motor3_torque & 0xFF);
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	b2da      	uxtb	r2, r3
 8000276:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <main+0xf4>)
 8000278:	715a      	strb	r2, [r3, #5]
    TxData[6] = (uint8_t)(motor4_torque >> 8);
 800027a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800027e:	121b      	asrs	r3, r3, #8
 8000280:	b21b      	sxth	r3, r3
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b0d      	ldr	r3, [pc, #52]	@ (80002bc <main+0xf4>)
 8000286:	719a      	strb	r2, [r3, #6]
    TxData[7] = (uint8_t)(motor4_torque & 0xFF);
 8000288:	883b      	ldrh	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <main+0xf4>)
 800028e:	71da      	strb	r2, [r3, #7]

    //int len = sprintf(uart_buffer, "Speed: %.2f RPM\r\n", actual_speed);
    //HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, len, 100);


    if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <main+0xf8>)
 8000292:	4a0a      	ldr	r2, [pc, #40]	@ (80002bc <main+0xf4>)
 8000294:	4908      	ldr	r1, [pc, #32]	@ (80002b8 <main+0xf0>)
 8000296:	4807      	ldr	r0, [pc, #28]	@ (80002b4 <main+0xec>)
 8000298:	f000 fda7 	bl	8000dea <HAL_CAN_AddTxMessage>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <main+0xde>
    {
      Error_Handler();
 80002a2:	f000 f99b 	bl	80005dc <Error_Handler>
    }

    // 送信が成功したらLEDを点滅
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80002a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f001 fcfb 	bl	8001ca8 <HAL_GPIO_TogglePin>
  {
 80002b2:	e7a4      	b.n	80001fe <main+0x36>
 80002b4:	20000028 	.word	0x20000028
 80002b8:	20000160 	.word	0x20000160
 80002bc:	20000194 	.word	0x20000194
 80002c0:	200001a4 	.word	0x200001a4

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b096      	sub	sp, #88	@ 0x58
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 ff37 	bl	8004146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 031c 	add.w	r3, r7, #28
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	2302      	movs	r3, #2
 80002fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	2300      	movs	r3, #0
 800030a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800030c:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000310:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fce0 	bl	8001cdc <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000322:	f000 f95b 	bl	80005dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 031c 	add.w	r3, r7, #28
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fcd8 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800034e:	f000 f945 	bl	80005dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000352:	2301      	movs	r3, #1
 8000354:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f002 fedf 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000368:	f000 f938 	bl	80005dc <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3758      	adds	r7, #88	@ 0x58
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	@ 0x28
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800037a:	4b28      	ldr	r3, [pc, #160]	@ (800041c <MX_CAN_Init+0xa8>)
 800037c:	4a28      	ldr	r2, [pc, #160]	@ (8000420 <MX_CAN_Init+0xac>)
 800037e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000380:	4b26      	ldr	r3, [pc, #152]	@ (800041c <MX_CAN_Init+0xa8>)
 8000382:	2203      	movs	r2, #3
 8000384:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000386:	4b25      	ldr	r3, [pc, #148]	@ (800041c <MX_CAN_Init+0xa8>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038c:	4b23      	ldr	r3, [pc, #140]	@ (800041c <MX_CAN_Init+0xa8>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000392:	4b22      	ldr	r3, [pc, #136]	@ (800041c <MX_CAN_Init+0xa8>)
 8000394:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000398:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800039a:	4b20      	ldr	r3, [pc, #128]	@ (800041c <MX_CAN_Init+0xa8>)
 800039c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003a0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a2:	4b1e      	ldr	r3, [pc, #120]	@ (800041c <MX_CAN_Init+0xa8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <MX_CAN_Init+0xa8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ae:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_CAN_Init+0xa8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003b4:	4b19      	ldr	r3, [pc, #100]	@ (800041c <MX_CAN_Init+0xa8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ba:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_CAN_Init+0xa8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c0:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_CAN_Init+0xa8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c6:	4815      	ldr	r0, [pc, #84]	@ (800041c <MX_CAN_Init+0xa8>)
 80003c8:	f000 fb06 	bl	80009d8 <HAL_CAN_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003d2:	f000 f903 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // Qiita記事のCANフィルタ設定を移植
  CAN_FilterTypeDef  sFilterConfig;
  sFilterConfig.FilterBank = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003de:	2301      	movs	r3, #1
 80003e0:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003f6:	2301      	movs	r3, #1
 80003f8:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003fa:	230e      	movs	r3, #14
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80003fe:	463b      	mov	r3, r7
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	@ (800041c <MX_CAN_Init+0xa8>)
 8000404:	f000 fbe3 	bl	8000bce <HAL_CAN_ConfigFilter>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_CAN_Init+0x9e>
  {
    Error_Handler();
 800040e:	f000 f8e5 	bl	80005dc <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	3728      	adds	r7, #40	@ 0x28
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000028 	.word	0x20000028
 8000420:	40006400 	.word	0x40006400

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b14      	ldr	r3, [pc, #80]	@ (800047c <MX_USART1_UART_Init+0x58>)
 800042a:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <MX_USART1_UART_Init+0x5c>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800042e:	4b13      	ldr	r3, [pc, #76]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000430:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <MX_USART1_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <MX_USART1_UART_Init+0x58>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	@ (800047c <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_USART1_UART_Init+0x58>)
 8000468:	f002 ff7e 	bl	8003368 <HAL_UART_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000472:	f000 f8b3 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000050 	.word	0x20000050
 8000480:	40013800 	.word	0x40013800

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 800048a:	4a15      	ldr	r2, [pc, #84]	@ (80004e0 <MX_USART2_UART_Init+0x5c>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800048e:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 8000490:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <MX_USART2_UART_Init+0x58>)
 80004c8:	f002 ff4e 	bl	8003368 <HAL_UART_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004d2:	f000 f883 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200000d8 	.word	0x200000d8
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <MX_GPIO_Init+0x94>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <MX_GPIO_Init+0x94>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <MX_GPIO_Init+0x94>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f001 fb94 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000550:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f001 fa12 	bl	8001994 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CANの受信割り込みコールバック関数
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000586:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000588:	2100      	movs	r1, #0
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 fcfd 	bl	8000f8a <HAL_CAN_GetRxMessage>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000596:	f000 f821 	bl	80005dc <Error_Handler>
  }

  // C610からのフィードバックメッセージを解析
  // モーター1のフィードバックIDは0x201
  if (RxHeader.StdId == 0x201)
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f240 2201 	movw	r2, #513	@ 0x201
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d110      	bne.n	80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
  {
    // C610のフィードバックデータフォーマットは以下の通り
    // Byte 2-3: モーター速度 (RPM)
    actual_speed = (int16_t)(RxData[2] << 8 | RxData[3]);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	021b      	lsls	r3, r3, #8
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80005b2:	78db      	ldrb	r3, [r3, #3]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80005c4:	edc3 7a00 	vstr	s15, [r3]
  }
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000019c 	.word	0x2000019c
 80005d4:	20000178 	.word	0x20000178
 80005d8:	200001a8 	.word	0x200001a8

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e0:	b672      	cpsid	i
}
 80005e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <Error_Handler+0x8>

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <HAL_MspInit+0x44>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	@ (800062c <HAL_MspInit+0x44>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <HAL_MspInit+0x44>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <HAL_MspInit+0x44>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a08      	ldr	r2, [pc, #32]	@ (800062c <HAL_MspInit+0x44>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_MspInit+0x44>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <HAL_CAN_MspInit+0x90>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d131      	bne.n	80006b6 <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000652:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 8000658:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_CAN_MspInit+0x94>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000682:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000694:	2309      	movs	r3, #9
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 f977 	bl	8001994 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2014      	movs	r0, #20
 80006ac:	f001 f8bf 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80006b0:	2014      	movs	r0, #20
 80006b2:	f001 f8d8 	bl	8001866 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	@ 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40006400 	.word	0x40006400
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a33      	ldr	r2, [pc, #204]	@ (80007b4 <HAL_UART_MspInit+0xec>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d128      	bne.n	800073c <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ea:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a32      	ldr	r2, [pc, #200]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 80006f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b30      	ldr	r3, [pc, #192]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b2d      	ldr	r3, [pc, #180]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a2c      	ldr	r2, [pc, #176]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800071a:	23c0      	movs	r3, #192	@ 0xc0
 800071c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800072a:	2307      	movs	r3, #7
 800072c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4821      	ldr	r0, [pc, #132]	@ (80007bc <HAL_UART_MspInit+0xf4>)
 8000736:	f001 f92d 	bl	8001994 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800073a:	e036      	b.n	80007aa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <HAL_UART_MspInit+0xf8>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d131      	bne.n	80007aa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a15      	ldr	r2, [pc, #84]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <HAL_UART_MspInit+0xf0>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000776:	f248 0304 	movw	r3, #32772	@ 0x8004
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000788:	2307      	movs	r3, #7
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000796:	f001 f8fd 	bl	8001994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2026      	movs	r0, #38	@ 0x26
 80007a0:	f001 f845 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a4:	2026      	movs	r0, #38	@ 0x26
 80007a6:	f001 f85e 	bl	8001866 <HAL_NVIC_EnableIRQ>
}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40013800 	.word	0x40013800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	40004400 	.word	0x40004400

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <NMI_Handler+0x4>

080007cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <MemManage_Handler+0x4>

080007dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f899 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000828:	4802      	ldr	r0, [pc, #8]	@ (8000834 <CAN_RX0_IRQHandler+0x10>)
 800082a:	f000 fcf6 	bl	800121a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000028 	.word	0x20000028

08000838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800083c:	4802      	ldr	r0, [pc, #8]	@ (8000848 <USART2_IRQHandler+0x10>)
 800083e:	f002 fde1 	bl	8003404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000d8 	.word	0x200000d8

0800084c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <SystemInit+0x20>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000856:	4a05      	ldr	r2, [pc, #20]	@ (800086c <SystemInit+0x20>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000874:	f7ff ffea 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LoopForever+0x6>)
  ldr r1, =_edata
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800087c:	4a0d      	ldr	r2, [pc, #52]	@ (80008b4 <LoopForever+0xe>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000880:	e002      	b.n	8000888 <LoopCopyDataInit>

08000882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000886:	3304      	adds	r3, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800088c:	d3f9      	bcc.n	8000882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088e:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000890:	4c0a      	ldr	r4, [pc, #40]	@ (80008bc <LoopForever+0x16>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000894:	e001      	b.n	800089a <LoopFillZerobss>

08000896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000898:	3204      	adds	r2, #4

0800089a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800089c:	d3fb      	bcc.n	8000896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800089e:	f003 fc5b 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008a2:	f7ff fc91 	bl	80001c8 <main>

080008a6 <LoopForever>:

LoopForever:
    b LoopForever
 80008a6:	e7fe      	b.n	80008a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008a8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b4:	080041f8 	.word	0x080041f8
  ldr r2, =_sbss
 80008b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008bc:	200001b0 	.word	0x200001b0

080008c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC1_2_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_Init+0x28>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	@ (80008ec <HAL_Init+0x28>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 ff9f 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff fe82 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40022000 	.word	0x40022000

080008f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ffb7 	bl	8001882 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 ff7f 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	@ (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	200001ac 	.word	0x200001ac

08000978 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;  
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200001ac 	.word	0x200001ac

08000990 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffde 	bl	8000978 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008

080009d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e0ed      	b.n	8000bc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fe1a 	bl	8000630 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0201 	orr.w	r2, r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a0c:	f7ff ffb4 	bl	8000978 <HAL_GetTick>
 8000a10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a12:	e012      	b.n	8000a3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a14:	f7ff ffb0 	bl	8000978 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d90b      	bls.n	8000a3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2205      	movs	r2, #5
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e0c5      	b.n	8000bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0e5      	beq.n	8000a14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0202 	bic.w	r2, r2, #2
 8000a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a58:	f7ff ff8e 	bl	8000978 <HAL_GetTick>
 8000a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a5e:	e012      	b.n	8000a86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a60:	f7ff ff8a 	bl	8000978 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b0a      	cmp	r3, #10
 8000a6c:	d90b      	bls.n	8000a86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e09f      	b.n	8000bc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1e5      	bne.n	8000a60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7e1b      	ldrb	r3, [r3, #24]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	e007      	b.n	8000abe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7e5b      	ldrb	r3, [r3, #25]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d108      	bne.n	8000ad8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ae6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7e9b      	ldrb	r3, [r3, #26]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0220 	orr.w	r2, r2, #32
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e007      	b.n	8000b12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0220 	bic.w	r2, r2, #32
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7edb      	ldrb	r3, [r3, #27]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0210 	bic.w	r2, r2, #16
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e007      	b.n	8000b3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0210 	orr.w	r2, r2, #16
 8000b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7f1b      	ldrb	r3, [r3, #28]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f042 0208 	orr.w	r2, r2, #8
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0208 	bic.w	r2, r2, #8
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7f5b      	ldrb	r3, [r3, #29]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d108      	bne.n	8000b80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f042 0204 	orr.w	r2, r2, #4
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0204 	bic.w	r2, r2, #4
 8000b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	ea42 0103 	orr.w	r1, r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b087      	sub	sp, #28
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000be4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000be6:	7cfb      	ldrb	r3, [r7, #19]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d003      	beq.n	8000bf4 <HAL_CAN_ConfigFilter+0x26>
 8000bec:	7cfb      	ldrb	r3, [r7, #19]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f040 80aa 	bne.w	8000d48 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f003 031f 	and.w	r3, r3, #31
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d123      	bne.n	8000c76 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3248      	adds	r2, #72	@ 0x48
 8000c56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c6c:	6979      	ldr	r1, [r7, #20]
 8000c6e:	3348      	adds	r3, #72	@ 0x48
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	440b      	add	r3, r1
 8000c74:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d122      	bne.n	8000cc4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	431a      	orrs	r2, r3
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3248      	adds	r2, #72	@ 0x48
 8000ca4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cba:	6979      	ldr	r1, [r7, #20]
 8000cbc:	3348      	adds	r3, #72	@ 0x48
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	440b      	add	r3, r1
 8000cc2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000cde:	e007      	b.n	8000cf0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d0a:	e007      	b.n	8000d1c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	431a      	orrs	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6a1b      	ldr	r3, [r3, #32]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d107      	bne.n	8000d34 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d3a:	f023 0201 	bic.w	r2, r3, #1
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	e006      	b.n	8000d56 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
  }
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d12e      	bne.n	8000dd4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2202      	movs	r2, #2
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0201 	bic.w	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d8e:	f7ff fdf3 	bl	8000978 <HAL_GetTick>
 8000d92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d94:	e012      	b.n	8000dbc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d96:	f7ff fdef 	bl	8000978 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b0a      	cmp	r3, #10
 8000da2:	d90b      	bls.n	8000dbc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2205      	movs	r2, #5
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e012      	b.n	8000de2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1e5      	bne.n	8000d96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e006      	b.n	8000de2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
  }
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b089      	sub	sp, #36	@ 0x24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e08:	7ffb      	ldrb	r3, [r7, #31]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d003      	beq.n	8000e16 <HAL_CAN_AddTxMessage+0x2c>
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	f040 80ad 	bne.w	8000f70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d10a      	bne.n	8000e36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d105      	bne.n	8000e36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8095 	beq.w	8000f60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	0e1b      	lsrs	r3, r3, #24
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e40:	2201      	movs	r2, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	409a      	lsls	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10d      	bne.n	8000e6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e5c:	68f9      	ldr	r1, [r7, #12]
 8000e5e:	6809      	ldr	r1, [r1, #0]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3318      	adds	r3, #24
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	440b      	add	r3, r1
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e00f      	b.n	8000e8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e7e:	68f9      	ldr	r1, [r7, #12]
 8000e80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3318      	adds	r3, #24
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	440b      	add	r3, r1
 8000e8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6819      	ldr	r1, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3318      	adds	r3, #24
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	7d1b      	ldrb	r3, [r3, #20]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d111      	bne.n	8000ece <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	6811      	ldr	r1, [r2, #0]
 8000ebe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3318      	adds	r3, #24
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	440b      	add	r3, r1
 8000eca:	3304      	adds	r3, #4
 8000ecc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061a      	lsls	r2, r3, #24
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3306      	adds	r3, #6
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3204      	adds	r2, #4
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	ea43 0200 	orr.w	r2, r3, r0
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	440b      	add	r3, r1
 8000f00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	061a      	lsls	r2, r3, #24
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3302      	adds	r3, #2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4313      	orrs	r3, r2
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	4610      	mov	r0, r2
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	6811      	ldr	r1, [r2, #0]
 8000f2c:	ea43 0200 	orr.w	r2, r3, r0
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	440b      	add	r3, r1
 8000f36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3318      	adds	r3, #24
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	6811      	ldr	r1, [r2, #0]
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3318      	adds	r3, #24
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	440b      	add	r3, r1
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e00e      	b.n	8000f7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e006      	b.n	8000f7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
  }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d003      	beq.n	8000fae <HAL_CAN_GetRxMessage+0x24>
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	f040 8103 	bne.w	80011b4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10e      	bne.n	8000fd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d116      	bne.n	8000ff0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0f7      	b.n	80011c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d107      	bne.n	8000ff0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0e8      	b.n	80011c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	331b      	adds	r3, #27
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0204 	and.w	r2, r3, #4
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	331b      	adds	r3, #27
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4413      	add	r3, r2
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0d5b      	lsrs	r3, r3, #21
 800101e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e00b      	b.n	8001040 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	331b      	adds	r3, #27
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	331b      	adds	r3, #27
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0202 	and.w	r2, r3, #2
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	331b      	adds	r3, #27
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	4413      	add	r3, r2
 8001062:	3304      	adds	r3, #4
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2208      	movs	r2, #8
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	e00b      	b.n	800108e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	331b      	adds	r3, #27
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	3304      	adds	r3, #4
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 020f 	and.w	r2, r3, #15
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	331b      	adds	r3, #27
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	3304      	adds	r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	331b      	adds	r3, #27
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	3304      	adds	r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0c1b      	lsrs	r3, r3, #16
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0a1a      	lsrs	r2, r3, #8
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	0c1a      	lsrs	r2, r3, #16
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3302      	adds	r3, #2
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0e1a      	lsrs	r2, r3, #24
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3303      	adds	r3, #3
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	3304      	adds	r3, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4413      	add	r3, r2
 8001144:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	0a1a      	lsrs	r2, r3, #8
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	3305      	adds	r3, #5
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0c1a      	lsrs	r2, r3, #16
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3306      	adds	r3, #6
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0e1a      	lsrs	r2, r3, #24
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	3307      	adds	r3, #7
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d108      	bne.n	80011a0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	e007      	b.n	80011b0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e006      	b.n	80011c2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
  }
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <HAL_CAN_ActivateNotification+0x1e>
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d109      	bne.n	8001200 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6959      	ldr	r1, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e006      	b.n	800120e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
  }
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b08a      	sub	sp, #40	@ 0x28
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d07c      	beq.n	800135a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d023      	beq.n	80012b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f983 	bl	8001588 <HAL_CAN_TxMailbox0CompleteCallback>
 8001282:	e016      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e00c      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	e002      	b.n	80012b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f989 	bl	80015c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d024      	beq.n	8001306 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f963 	bl	800159c <HAL_CAN_TxMailbox1CompleteCallback>
 80012d6:	e016      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ea:	e00c      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fe:	e002      	b.n	8001306 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f969 	bl	80015d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d024      	beq.n	800135a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f943 	bl	80015b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800132a:	e016      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
 800133e:	e00c      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d004      	beq.n	8001354 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
 8001352:	e002      	b.n	800135a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f949 	bl	80015ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00c      	beq.n	800137e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2210      	movs	r2, #16
 800137c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2208      	movs	r2, #8
 8001398:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f930 	bl	8001600 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff f8df 	bl	800057c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2210      	movs	r2, #16
 80013e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2208      	movs	r2, #8
 80013fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 f912 	bl	8001628 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f8f9 	bl	8001614 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2210      	movs	r2, #16
 800143c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8fc 	bl	800163c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2208      	movs	r2, #8
 800145e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f8f5 	bl	8001650 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d07b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d072      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d043      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03e      	beq.n	8001560 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014e8:	2b60      	cmp	r3, #96	@ 0x60
 80014ea:	d02b      	beq.n	8001544 <HAL_CAN_IRQHandler+0x32a>
 80014ec:	2b60      	cmp	r3, #96	@ 0x60
 80014ee:	d82e      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 80014f0:	2b50      	cmp	r3, #80	@ 0x50
 80014f2:	d022      	beq.n	800153a <HAL_CAN_IRQHandler+0x320>
 80014f4:	2b50      	cmp	r3, #80	@ 0x50
 80014f6:	d82a      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 80014f8:	2b40      	cmp	r3, #64	@ 0x40
 80014fa:	d019      	beq.n	8001530 <HAL_CAN_IRQHandler+0x316>
 80014fc:	2b40      	cmp	r3, #64	@ 0x40
 80014fe:	d826      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 8001500:	2b30      	cmp	r3, #48	@ 0x30
 8001502:	d010      	beq.n	8001526 <HAL_CAN_IRQHandler+0x30c>
 8001504:	2b30      	cmp	r3, #48	@ 0x30
 8001506:	d822      	bhi.n	800154e <HAL_CAN_IRQHandler+0x334>
 8001508:	2b10      	cmp	r3, #16
 800150a:	d002      	beq.n	8001512 <HAL_CAN_IRQHandler+0x2f8>
 800150c:	2b20      	cmp	r3, #32
 800150e:	d005      	beq.n	800151c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001510:	e01d      	b.n	800154e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800151a:	e019      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001524:	e014      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	f043 0320 	orr.w	r3, r3, #32
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800152e:	e00f      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001538:	e00a      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001542:	e005      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800154c:	e000      	b.n	8001550 <HAL_CAN_IRQHandler+0x336>
            break;
 800154e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800155e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2204      	movs	r2, #4
 8001566:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f872 	bl	8001664 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	@ (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e02e      	b.n	800190a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d008      	beq.n	80018c8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2204      	movs	r2, #4
 80018ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e020      	b.n	800190a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001928:	2b02      	cmp	r3, #2
 800192a:	d005      	beq.n	8001938 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e027      	b.n	8001988 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 020e 	bic.w	r2, r2, #14
 8001946:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f202 	lsl.w	r2, r1, r2
 8001966:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
    }
  }
  return status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	e14e      	b.n	8001c42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8140 	beq.w	8001c3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d005      	beq.n	80019d4 <HAL_GPIO_Init+0x40>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d017      	beq.n	8001a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	6939      	ldr	r1, [r7, #16]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 809a 	beq.w	8001c3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b08:	4b55      	ldr	r3, [pc, #340]	@ (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a54      	ldr	r2, [pc, #336]	@ (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b52      	ldr	r3, [pc, #328]	@ (8001c60 <HAL_GPIO_Init+0x2cc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b20:	4a50      	ldr	r2, [pc, #320]	@ (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a46      	ldr	r2, [pc, #280]	@ (8001c68 <HAL_GPIO_Init+0x2d4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a45      	ldr	r2, [pc, #276]	@ (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1d8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a44      	ldr	r2, [pc, #272]	@ (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1d4>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b86:	4937      	ldr	r1, [pc, #220]	@ (8001c64 <HAL_GPIO_Init+0x2d0>)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be2:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c0c:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c12:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c36:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f aea9 	bne.w	80019a4 <HAL_GPIO_Init+0x10>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	48000c00 	.word	0x48000c00
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43d9      	mvns	r1, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f000 bff4 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 816d 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d18:	4bb4      	ldr	r3, [pc, #720]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d24:	4bb1      	ldr	r3, [pc, #708]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x104>
 8001d30:	4bae      	ldr	r3, [pc, #696]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d150      	bne.n	8001de0 <HAL_RCC_OscConfig+0x104>
 8001d3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d42:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5e:	d802      	bhi.n	8001d66 <HAL_RCC_OscConfig+0x8a>
 8001d60:	4ba2      	ldr	r3, [pc, #648]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0xb6>
 8001d66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d6a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d8e:	4b97      	ldr	r3, [pc, #604]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d96:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001da6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001daa:	fab2 f282 	clz	r2, r2
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f042 0220 	orr.w	r2, r2, #32
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f002 021f 	and.w	r2, r2, #31
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8114 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x314>
 8001dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dcc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 810b 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f000 bf85 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x124>
 8001df2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e036      	b.n	8001e6e <HAL_RCC_OscConfig+0x192>
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x14e>
 8001e10:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a75      	ldr	r2, [pc, #468]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b73      	ldr	r3, [pc, #460]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a72      	ldr	r2, [pc, #456]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e021      	b.n	8001e6e <HAL_RCC_OscConfig+0x192>
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x17a>
 8001e3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6a      	ldr	r2, [pc, #424]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b68      	ldr	r3, [pc, #416]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a67      	ldr	r2, [pc, #412]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x192>
 8001e56:	4b65      	ldr	r3, [pc, #404]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a64      	ldr	r2, [pc, #400]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b62      	ldr	r3, [pc, #392]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a61      	ldr	r2, [pc, #388]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	f023 020f 	bic.w	r2, r3, #15
 8001e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	495a      	ldr	r1, [pc, #360]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d054      	beq.n	8001f42 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fd6e 	bl	8000978 <HAL_GetTick>
 8001e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea2:	f7fe fd69 	bl	8000978 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d902      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	f000 bf19 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 8001eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ebc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001ecc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_RCC_OscConfig+0x204>
 8001eda:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e015      	b.n	8001f0c <HAL_RCC_OscConfig+0x230>
 8001ee0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ee4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001ef4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001efc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001f08:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f10:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001f14:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001f20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f002 021f 	and.w	r2, r2, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0b0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1c6>
 8001f40:	e057      	b.n	8001ff2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fd19 	bl	8000978 <HAL_GetTick>
 8001f46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe fd14 	bl	8000978 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	@ 0x64
 8001f5a:	d902      	bls.n	8001f62 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	f000 bec4 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 8001f62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f66:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f82:	d802      	bhi.n	8001f8a <HAL_RCC_OscConfig+0x2ae>
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2da>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f8e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001fa6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_RCC_OscConfig+0x310>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001fbe:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001fca:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1b0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x270>
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_OscConfig+0x316>
 8001fec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 816c 	beq.w	80022e0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002008:	4bcc      	ldr	r3, [pc, #816]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002014:	4bc9      	ldr	r3, [pc, #804]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d16d      	bne.n	80020fc <HAL_RCC_OscConfig+0x420>
 8002020:	4bc6      	ldr	r3, [pc, #792]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d167      	bne.n	80020fc <HAL_RCC_OscConfig+0x420>
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800203e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b3f      	cmp	r3, #63	@ 0x3f
 800204a:	d802      	bhi.n	8002052 <HAL_RCC_OscConfig+0x376>
 800204c:	4bbb      	ldr	r3, [pc, #748]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e013      	b.n	800207a <HAL_RCC_OscConfig+0x39e>
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800206a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002076:	4bb1      	ldr	r3, [pc, #708]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	2202      	movs	r2, #2
 800207c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002080:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002084:	fa92 f2a2 	rbit	r2, r2
 8002088:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800208c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3e6>
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f000 be14 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b9e      	ldr	r3, [pc, #632]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	21f8      	movs	r1, #248	@ 0xf8
 80020d8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020e0:	fa91 f1a1 	rbit	r1, r1
 80020e4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020e8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020ec:	fab1 f181 	clz	r1, r1
 80020f0:	b2c9      	uxtb	r1, r1
 80020f2:	408b      	lsls	r3, r1
 80020f4:	4991      	ldr	r1, [pc, #580]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e0f1      	b.n	80022e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8083 	beq.w	8002214 <HAL_RCC_OscConfig+0x538>
 800210e:	2301      	movs	r3, #1
 8002110:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002120:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800212e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fc1d 	bl	8000978 <HAL_GetTick>
 800213e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002144:	f7fe fc18 	bl	8000978 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d902      	bls.n	800215a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	f000 bdc8 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800216c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b3f      	cmp	r3, #63	@ 0x3f
 8002178:	d802      	bhi.n	8002180 <HAL_RCC_OscConfig+0x4a4>
 800217a:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e013      	b.n	80021a8 <HAL_RCC_OscConfig+0x4cc>
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002192:	2302      	movs	r3, #2
 8002194:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002198:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80021a4:	4b65      	ldr	r3, [pc, #404]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	2202      	movs	r2, #2
 80021aa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80021ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80021b2:	fa92 f2a2 	rbit	r2, r2
 80021b6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80021ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80021be:	fab2 f282 	clz	r2, r2
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f042 0220 	orr.w	r2, r2, #32
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	f002 021f 	and.w	r2, r2, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f202 	lsl.w	r2, r1, r2
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0b4      	beq.n	8002144 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b58      	ldr	r3, [pc, #352]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	21f8      	movs	r1, #248	@ 0xf8
 80021f0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021f8:	fa91 f1a1 	rbit	r1, r1
 80021fc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002200:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002204:	fab1 f181 	clz	r1, r1
 8002208:	b2c9      	uxtb	r1, r1
 800220a:	408b      	lsls	r3, r1
 800220c:	494b      	ldr	r1, [pc, #300]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	e065      	b.n	80022e0 <HAL_RCC_OscConfig+0x604>
 8002214:	2301      	movs	r3, #1
 8002216:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002226:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002234:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	461a      	mov	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fb9a 	bl	8000978 <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fb95 	bl	8000978 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d902      	bls.n	8002260 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	f000 bd45 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002272:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b3f      	cmp	r3, #63	@ 0x3f
 800227e:	d802      	bhi.n	8002286 <HAL_RCC_OscConfig+0x5aa>
 8002280:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e013      	b.n	80022ae <HAL_RCC_OscConfig+0x5d2>
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002298:	2302      	movs	r3, #2
 800229a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800229e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80022aa:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCC_OscConfig+0x660>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	2202      	movs	r2, #2
 80022b0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80022b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80022c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1b4      	bne.n	800224a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8115 	beq.w	8002520 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d07e      	beq.n	8002404 <HAL_RCC_OscConfig+0x728>
 8002306:	2301      	movs	r3, #1
 8002308:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_RCC_OscConfig+0x664>)
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	461a      	mov	r2, r3
 800232c:	2301      	movs	r3, #1
 800232e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe fb22 	bl	8000978 <HAL_GetTick>
 8002334:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002338:	e00f      	b.n	800235a <HAL_RCC_OscConfig+0x67e>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fb18 	bl	8000978 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d902      	bls.n	800235a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	f000 bcc8 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002374:	2202      	movs	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002398:	2202      	movs	r2, #2
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80023b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023c0:	2102      	movs	r1, #2
 80023c2:	6019      	str	r1, [r3, #0]
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f1a3 	rbit	r1, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023da:	6019      	str	r1, [r3, #0]
  return result;
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0a0      	beq.n	8002344 <HAL_RCC_OscConfig+0x668>
 8002402:	e08d      	b.n	8002520 <HAL_RCC_OscConfig+0x844>
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	fa93 f2a3 	rbit	r2, r3
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002426:	601a      	str	r2, [r3, #0]
  return result;
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002430:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4b90      	ldr	r3, [pc, #576]	@ (800267c <HAL_RCC_OscConfig+0x9a0>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2300      	movs	r3, #0
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe fa97 	bl	8000978 <HAL_GetTick>
 800244a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fa92 	bl	8000978 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bc42 	b.w	8002cea <HAL_RCC_OscConfig+0x100e>
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002484:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002492:	2202      	movs	r2, #2
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	4b69      	ldr	r3, [pc, #420]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80024d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024de:	2102      	movs	r1, #2
 80024e0:	6019      	str	r1, [r3, #0]
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f1a3 	rbit	r1, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024f8:	6019      	str	r1, [r3, #0]
  return result;
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d197      	bne.n	8002450 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002524:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 819e 	beq.w	8002872 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a4a      	ldr	r2, [pc, #296]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002552:	61d3      	str	r3, [r2, #28]
 8002554:	4b48      	ldr	r3, [pc, #288]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800256e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b42      	ldr	r3, [pc, #264]	@ (8002680 <HAL_RCC_OscConfig+0x9a4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b3f      	ldr	r3, [pc, #252]	@ (8002680 <HAL_RCC_OscConfig+0x9a4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <HAL_RCC_OscConfig+0x9a4>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe f9f3 	bl	8000978 <HAL_GetTick>
 8002592:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	e009      	b.n	80025ac <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7fe f9ee 	bl	8000978 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	@ 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e39e      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <HAL_RCC_OscConfig+0x9a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x8fa>
 80025c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e035      	b.n	8002642 <HAL_RCC_OscConfig+0x966>
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x924>
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a20      	ldr	r2, [pc, #128]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	e020      	b.n	8002642 <HAL_RCC_OscConfig+0x966>
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x94e>
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e00b      	b.n	8002642 <HAL_RCC_OscConfig+0x966>
 800262a:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a12      	ldr	r2, [pc, #72]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a0f      	ldr	r2, [pc, #60]	@ (8002678 <HAL_RCC_OscConfig+0x99c>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7fe f990 	bl	8000978 <HAL_GetTick>
 8002658:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	e012      	b.n	8002684 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe f98b 	bl	8000978 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d908      	bls.n	8002684 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e339      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	10908120 	.word	0x10908120
 8002680:	40007000 	.word	0x40007000
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800268c:	2202      	movs	r2, #2
 800268e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026b0:	2202      	movs	r2, #2
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0xa10>
 80026e6:	4b98      	ldr	r3, [pc, #608]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	e013      	b.n	8002714 <HAL_RCC_OscConfig+0xa38>
 80026ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026f4:	2202      	movs	r2, #2
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b8d      	ldr	r3, [pc, #564]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002718:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800271c:	2102      	movs	r1, #2
 800271e:	6011      	str	r1, [r2, #0]
 8002720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002724:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	fa92 f1a2 	rbit	r1, r2
 800272e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002732:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002736:	6011      	str	r1, [r2, #0]
  return result;
 8002738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800273c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	f43f af7f 	beq.w	800265e <HAL_RCC_OscConfig+0x982>
 8002760:	e07d      	b.n	800285e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe f909 	bl	8000978 <HAL_GetTick>
 8002766:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe f904 	bl	8000978 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e2b2      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027ca:	601a      	str	r2, [r3, #0]
  return result;
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0xb10>
 80027e6:	4b58      	ldr	r3, [pc, #352]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	e013      	b.n	8002814 <HAL_RCC_OscConfig+0xb38>
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027f4:	2202      	movs	r2, #2
 80027f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f2a3 	rbit	r2, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002818:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800281c:	2102      	movs	r1, #2
 800281e:	6011      	str	r1, [r2, #0]
 8002820:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002824:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	fa92 f1a2 	rbit	r1, r2
 800282e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002832:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002836:	6011      	str	r1, [r2, #0]
  return result;
 8002838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800283c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	f002 021f 	and.w	r2, r2, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d186      	bne.n	800276c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800285e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002862:	2b01      	cmp	r3, #1
 8002864:	d105      	bne.n	8002872 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a37      	ldr	r2, [pc, #220]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 800286c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002870:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8232 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b30      	ldr	r3, [pc, #192]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	f000 8201 	beq.w	8002c94 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	f040 8157 	bne.w	8002b52 <HAL_RCC_OscConfig+0xe76>
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028c8:	601a      	str	r2, [r3, #0]
  return result;
 80028ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	461a      	mov	r2, r3
 80028e6:	2300      	movs	r3, #0
 80028e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe f845 	bl	8000978 <HAL_GetTick>
 80028ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f2:	e009      	b.n	8002908 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe f840 	bl	8000978 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1f0      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800292c:	601a      	str	r2, [r3, #0]
  return result;
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002936:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002940:	d804      	bhi.n	800294c <HAL_RCC_OscConfig+0xc70>
 8002942:	4b01      	ldr	r3, [pc, #4]	@ (8002948 <HAL_RCC_OscConfig+0xc6c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	e029      	b.n	800299c <HAL_RCC_OscConfig+0xcc0>
 8002948:	40021000 	.word	0x40021000
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800296c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800297a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	4bc3      	ldr	r3, [pc, #780]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a8:	6011      	str	r1, [r2, #0]
 80029aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029c0:	6011      	str	r1, [r2, #0]
  return result;
 80029c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fab2 f282 	clz	r2, r2
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f002 021f 	and.w	r2, r2, #31
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d185      	bne.n	80028f4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e8:	4baf      	ldr	r3, [pc, #700]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	49a7      	ldr	r1, [pc, #668]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a14:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a22:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a30:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a34:	601a      	str	r2, [r3, #0]
  return result;
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fd ff8f 	bl	8000978 <HAL_GetTick>
 8002a5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5e:	e009      	b.n	8002a74 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fd ff8a 	bl	8000978 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e13a      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fa93 f2a3 	rbit	r2, r3
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a98:	601a      	str	r2, [r3, #0]
  return result;
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002aa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aac:	d802      	bhi.n	8002ab4 <HAL_RCC_OscConfig+0xdd8>
 8002aae:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e027      	b.n	8002b04 <HAL_RCC_OscConfig+0xe28>
 8002ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	4b69      	ldr	r3, [pc, #420]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b08:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b16:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b28:	6011      	str	r1, [r2, #0]
  return result;
 8002b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d087      	beq.n	8002a60 <HAL_RCC_OscConfig+0xd84>
 8002b50:	e0ca      	b.n	8002ce8 <HAL_RCC_OscConfig+0x100c>
 8002b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b56:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b64:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b76:	601a      	str	r2, [r3, #0]
  return result;
 8002b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	461a      	mov	r2, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd feee 	bl	8000978 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	e009      	b.n	8002bb6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fd fee9 	bl	8000978 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e099      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bda:	601a      	str	r2, [r3, #0]
  return result;
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002be4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bee:	d802      	bhi.n	8002bf6 <HAL_RCC_OscConfig+0xf1a>
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	e027      	b.n	8002c46 <HAL_RCC_OscConfig+0xf6a>
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <HAL_RCC_OscConfig+0xfcc>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c4a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c4e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c52:	6011      	str	r1, [r2, #0]
 8002c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c58:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	fa92 f1a2 	rbit	r1, r2
 8002c62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c6a:	6011      	str	r1, [r2, #0]
  return result;
 8002c6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c70:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0220 	orr.w	r2, r2, #32
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d187      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xec6>
 8002c92:	e029      	b.n	8002ce8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d103      	bne.n	8002cac <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e020      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
 8002ca8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_RCC_OscConfig+0x1018>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cb4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ccc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cd0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09e      	sub	sp, #120	@ 0x78
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e154      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b86      	ldr	r3, [pc, #536]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4984      	ldr	r1, [pc, #528]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b82      	ldr	r3, [pc, #520]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e13c      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4978      	ldr	r1, [pc, #480]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80cd 	beq.w	8002f06 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d137      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xec>
 8002d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d8c:	d802      	bhi.n	8002d94 <HAL_RCC_ClockConfig+0x9c>
 8002d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e00f      	b.n	8002db4 <HAL_RCC_ClockConfig+0xbc>
 8002d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002da2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002db0:	4b62      	ldr	r3, [pc, #392]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002db8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dbc:	fa92 f2a2 	rbit	r2, r2
 8002dc0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002dc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dc4:	fab2 f282 	clz	r2, r2
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f042 0220 	orr.w	r2, r2, #32
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f002 021f 	and.w	r2, r2, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d171      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0ea      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d137      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x164>
 8002dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e04:	d802      	bhi.n	8002e0c <HAL_RCC_ClockConfig+0x114>
 8002e06:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_ClockConfig+0x134>
 8002e0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e28:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e30:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f002 021f 	and.w	r2, r2, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d135      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0ae      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e72:	d802      	bhi.n	8002e7a <HAL_RCC_ClockConfig+0x182>
 8002e74:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e00d      	b.n	8002e96 <HAL_RCC_ClockConfig+0x19e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	2302      	movs	r3, #2
 8002e88:	623b      	str	r3, [r7, #32]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2202      	movs	r2, #2
 8002e98:	61ba      	str	r2, [r7, #24]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	fa92 f2a2 	rbit	r2, r2
 8002ea0:	617a      	str	r2, [r7, #20]
  return result;
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	fab2 f282 	clz	r2, r2
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f042 0220 	orr.w	r2, r2, #32
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f002 021f 	and.w	r2, r2, #31
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e07a      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 0203 	bic.w	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	491a      	ldr	r1, [pc, #104]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed6:	f7fd fd4f 	bl	8000978 <HAL_GetTick>
 8002eda:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ede:	f7fd fd4b 	bl	8000978 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e062      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef4:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 020c 	and.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d1eb      	bne.n	8002ede <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f06:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d215      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 0207 	bic.w	r2, r3, #7
 8002f1c:	4906      	ldr	r1, [pc, #24]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HAL_RCC_ClockConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d006      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e041      	b.n	8002fba <HAL_RCC_ClockConfig+0x2c2>
 8002f36:	bf00      	nop
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4912      	ldr	r1, [pc, #72]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f7e:	f000 f829 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2cc>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	22f0      	movs	r2, #240	@ 0xf0
 8002f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	40d3      	lsrs	r3, r2
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2d0>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002faa:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <HAL_RCC_ClockConfig+0x2d4>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_RCC_ClockConfig+0x2d8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fc9c 	bl	80008f0 <HAL_InitTick>
  
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3778      	adds	r7, #120	@ 0x78
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	080041b8 	.word	0x080041b8
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x36>
 8003002:	e026      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCC_GetSysClockFreq+0x98>)
 8003006:	613b      	str	r3, [r7, #16]
      break;
 8003008:	e026      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003018:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x94>)
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003030:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e004      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a0c      	ldr	r2, [pc, #48]	@ (8003078 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e002      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003054:	613b      	str	r3, [r7, #16]
      break;
 8003056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003058:	693b      	ldr	r3, [r7, #16]
}
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	00f42400 	.word	0x00f42400
 8003070:	080041d0 	.word	0x080041d0
 8003074:	080041e0 	.word	0x080041e0
 8003078:	003d0900 	.word	0x003d0900
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800309e:	f7ff ffef 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080041c8 	.word	0x080041c8

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030e2:	f7ff ffcd 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	603a      	str	r2, [r7, #0]
  return result;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x40>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	080041c8 	.word	0x080041c8

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b092      	sub	sp, #72	@ 0x48
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80cb 	beq.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003144:	4b85      	ldr	r3, [pc, #532]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10e      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	4a81      	ldr	r2, [pc, #516]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315a:	61d3      	str	r3, [r2, #28]
 800315c:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316e:	4b7c      	ldr	r3, [pc, #496]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d118      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317a:	4b79      	ldr	r3, [pc, #484]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a78      	ldr	r2, [pc, #480]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003186:	f7fd fbf7 	bl	8000978 <HAL_GetTick>
 800318a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	e008      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318e:	f7fd fbf3 	bl	8000978 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	@ 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0d9      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0f0      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ac:	4b6b      	ldr	r3, [pc, #428]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d07b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d074      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ca:	4b64      	ldr	r3, [pc, #400]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031d8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	461a      	mov	r2, r3
 80031f4:	2301      	movs	r3, #1
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003208:	fab3 f383 	clz	r3, r3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b54      	ldr	r3, [pc, #336]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321c:	4a4f      	ldr	r2, [pc, #316]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800321e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003220:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d043      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fd fba4 	bl	8000978 <HAL_GetTick>
 8003230:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7fd fba0 	bl	8000978 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e084      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800324a:	2302      	movs	r3, #2
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	61fb      	str	r3, [r7, #28]
  return result;
 8003262:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003274:	4b39      	ldr	r3, [pc, #228]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	e007      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	4b35      	ldr	r3, [pc, #212]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2202      	movs	r2, #2
 800328c:	613a      	str	r2, [r7, #16]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	60fa      	str	r2, [r7, #12]
  return result;
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0bf      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032b4:	4b29      	ldr	r3, [pc, #164]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4926      	ldr	r1, [pc, #152]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b23      	ldr	r3, [pc, #140]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a22      	ldr	r2, [pc, #136]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e6:	4b1d      	ldr	r3, [pc, #116]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	491a      	ldr	r1, [pc, #104]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003304:	4b15      	ldr	r3, [pc, #84]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	f023 0210 	bic.w	r2, r3, #16
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4912      	ldr	r1, [pc, #72]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	490b      	ldr	r1, [pc, #44]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003340:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	4903      	ldr	r1, [pc, #12]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3748      	adds	r7, #72	@ 0x48
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	40007000 	.word	0x40007000
 8003364:	10908100 	.word	0x10908100

08003368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e040      	b.n	80033fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd f99c 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fc64 	bl	8003c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb2b 	bl	8003a10 <UART_SetConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01b      	b.n	80033fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fce3 	bl	8003dc0 <UART_CheckIdleState>
 80033fa:	4603      	mov	r3, r0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b0ba      	sub	sp, #232	@ 0xe8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800342a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800342e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003432:	4013      	ands	r3, r2
 8003434:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d115      	bne.n	800346c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00f      	beq.n	800346c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 82ab 	beq.w	80039b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
      }
      return;
 800346a:	e2a5      	b.n	80039b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800346c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8117 	beq.w	80036a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003482:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003486:	4b85      	ldr	r3, [pc, #532]	@ (800369c <HAL_UART_IRQHandler+0x298>)
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 810a 	beq.w	80036a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d011      	beq.n	80034c0 <HAL_UART_IRQHandler+0xbc>
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d011      	beq.n	80034f0 <HAL_UART_IRQHandler+0xec>
 80034cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2202      	movs	r2, #2
 80034de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e6:	f043 0204 	orr.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d011      	beq.n	8003520 <HAL_UART_IRQHandler+0x11c>
 80034fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2204      	movs	r2, #4
 800350e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800353c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003552:	f043 0208 	orr.w	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <HAL_UART_IRQHandler+0x18a>
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00c      	beq.n	800358e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800357c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8211 	beq.w	80039bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d005      	beq.n	80035e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d04f      	beq.n	8003686 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fcff 	bl	8003fea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b40      	cmp	r3, #64	@ 0x40
 80035f8:	d141      	bne.n	800367e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3308      	adds	r3, #8
 8003600:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003610:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003626:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800362a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800363e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1d9      	bne.n	80035fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364a:	2b00      	cmp	r3, #0
 800364c:	d013      	beq.n	8003676 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003652:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <HAL_UART_IRQHandler+0x29c>)
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe f95b 	bl	8001916 <HAL_DMA_Abort_IT>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d017      	beq.n	8003696 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003670:	4610      	mov	r0, r2
 8003672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003674:	e00f      	b.n	8003696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9b4 	bl	80039e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	e00b      	b.n	8003696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9b0 	bl	80039e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	e007      	b.n	8003696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f9ac 	bl	80039e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003694:	e192      	b.n	80039bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003696:	bf00      	nop
    return;
 8003698:	e190      	b.n	80039bc <HAL_UART_IRQHandler+0x5b8>
 800369a:	bf00      	nop
 800369c:	04000120 	.word	0x04000120
 80036a0:	080040b3 	.word	0x080040b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 814b 	bne.w	8003944 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8144 	beq.w	8003944 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 813d 	beq.w	8003944 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2210      	movs	r2, #16
 80036d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b40      	cmp	r3, #64	@ 0x40
 80036de:	f040 80b5 	bne.w	800384c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8164 	beq.w	80039c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003702:	429a      	cmp	r2, r3
 8003704:	f080 815c 	bcs.w	80039c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800370e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	2b20      	cmp	r3, #32
 800371a:	f000 8086 	beq.w	800382a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003736:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800373a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003748:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800374c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003754:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1da      	bne.n	800371e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3308      	adds	r3, #8
 8003788:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800378c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003790:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003792:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003794:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800379e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e1      	bne.n	8003768 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e3      	bne.n	80037a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fa:	f023 0310 	bic.w	r3, r3, #16
 80037fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800380c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800380e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003812:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e4      	bne.n	80037ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe f838 	bl	800189a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800383c:	b29b      	uxth	r3, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8d7 	bl	80039f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800384a:	e0b9      	b.n	80039c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003858:	b29b      	uxth	r3, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80ab 	beq.w	80039c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800386e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80a6 	beq.w	80039c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800388c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
 800389c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e4      	bne.n	8003878 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	623b      	str	r3, [r7, #32]
   return(result);
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3308      	adds	r3, #8
 80038ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038da:	e841 2300 	strex	r3, r2, [r1]
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1e3      	bne.n	80038ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	60fb      	str	r3, [r7, #12]
   return(result);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	69b9      	ldr	r1, [r7, #24]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	617b      	str	r3, [r7, #20]
   return(result);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e4      	bne.n	80038fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f85b 	bl	80039f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003942:	e03f      	b.n	80039c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00e      	beq.n	800396e <HAL_UART_IRQHandler+0x56a>
 8003950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fbe3 	bl	8004132 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800396c:	e02d      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800397e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01c      	beq.n	80039c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
    }
    return;
 8003996:	e017      	b.n	80039c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_UART_IRQHandler+0x5c6>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb94 	bl	80040de <UART_EndTransmit_IT>
    return;
 80039b6:	e008      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80039b8:	bf00      	nop
 80039ba:	e006      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80039c8:	bf00      	nop
  }

}
 80039ca:	37e8      	adds	r7, #232	@ 0xe8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c64 <UART_SetConfig+0x254>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6979      	ldr	r1, [r7, #20]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a78      	ldr	r2, [pc, #480]	@ (8003c68 <UART_SetConfig+0x258>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d120      	bne.n	8003ace <UART_SetConfig+0xbe>
 8003a8c:	4b77      	ldr	r3, [pc, #476]	@ (8003c6c <UART_SetConfig+0x25c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d817      	bhi.n	8003ac8 <UART_SetConfig+0xb8>
 8003a98:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa0 <UART_SetConfig+0x90>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ac3 	.word	0x08003ac3
 8003aac:	08003ab7 	.word	0x08003ab7
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e01d      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e01a      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e017      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e014      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e011      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a67      	ldr	r2, [pc, #412]	@ (8003c70 <UART_SetConfig+0x260>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d102      	bne.n	8003ade <UART_SetConfig+0xce>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e009      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a64      	ldr	r2, [pc, #400]	@ (8003c74 <UART_SetConfig+0x264>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d102      	bne.n	8003aee <UART_SetConfig+0xde>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e001      	b.n	8003af2 <UART_SetConfig+0xe2>
 8003aee:	2310      	movs	r3, #16
 8003af0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afa:	d15a      	bne.n	8003bb2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003afc:	7ffb      	ldrb	r3, [r7, #31]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d827      	bhi.n	8003b52 <UART_SetConfig+0x142>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <UART_SetConfig+0xf8>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b53 	.word	0x08003b53
 8003b18:	08003b43 	.word	0x08003b43
 8003b1c:	08003b53 	.word	0x08003b53
 8003b20:	08003b53 	.word	0x08003b53
 8003b24:	08003b53 	.word	0x08003b53
 8003b28:	08003b4b 	.word	0x08003b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f7ff fab4 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003b30:	61b8      	str	r0, [r7, #24]
        break;
 8003b32:	e013      	b.n	8003b5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b34:	f7ff fad2 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8003b38:	61b8      	str	r0, [r7, #24]
        break;
 8003b3a:	e00f      	b.n	8003b5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <UART_SetConfig+0x268>)
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e00c      	b.n	8003b5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b42:	f7ff fa47 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8003b46:	61b8      	str	r0, [r7, #24]
        break;
 8003b48:	e008      	b.n	8003b5c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b4e:	61bb      	str	r3, [r7, #24]
        break;
 8003b50:	e004      	b.n	8003b5c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	77bb      	strb	r3, [r7, #30]
        break;
 8003b5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d074      	beq.n	8003c4c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	005a      	lsls	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b0f      	cmp	r3, #15
 8003b7c:	d916      	bls.n	8003bac <UART_SetConfig+0x19c>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b84:	d212      	bcs.n	8003bac <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f023 030f 	bic.w	r3, r3, #15
 8003b8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	89fb      	ldrh	r3, [r7, #14]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	89fa      	ldrh	r2, [r7, #14]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	e04f      	b.n	8003c4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77bb      	strb	r3, [r7, #30]
 8003bb0:	e04c      	b.n	8003c4c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d828      	bhi.n	8003c0a <UART_SetConfig+0x1fa>
 8003bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <UART_SetConfig+0x1b0>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003be5 	.word	0x08003be5
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003bf5 	.word	0x08003bf5
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003bfb 	.word	0x08003bfb
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
 8003be0:	08003c03 	.word	0x08003c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be4:	f7ff fa58 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003be8:	61b8      	str	r0, [r7, #24]
        break;
 8003bea:	e013      	b.n	8003c14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bec:	f7ff fa76 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <UART_SetConfig+0x268>)
 8003bf6:	61bb      	str	r3, [r7, #24]
        break;
 8003bf8:	e00c      	b.n	8003c14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7ff f9eb 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8003bfe:	61b8      	str	r0, [r7, #24]
        break;
 8003c00:	e008      	b.n	8003c14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c06:	61bb      	str	r3, [r7, #24]
        break;
 8003c08:	e004      	b.n	8003c14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	77bb      	strb	r3, [r7, #30]
        break;
 8003c12:	bf00      	nop
    }

    if (pclk != 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	085a      	lsrs	r2, r3, #1
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b0f      	cmp	r3, #15
 8003c32:	d909      	bls.n	8003c48 <UART_SetConfig+0x238>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3a:	d205      	bcs.n	8003c48 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	e001      	b.n	8003c4c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c58:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	efff69f3 	.word	0xefff69f3
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40004800 	.word	0x40004800
 8003c78:	007a1200 	.word	0x007a1200

08003c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7a:	d10a      	bne.n	8003d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	@ 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd0:	f7fc fdd2 	bl	8000978 <HAL_GetTick>
 8003dd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d12e      	bne.n	8003e42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f88c 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d021      	beq.n	8003e42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e062      	b.n	8003f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d149      	bne.n	8003ee4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f856 	bl	8003f10 <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03c      	beq.n	8003ee4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	623b      	str	r3, [r7, #32]
   return(result);
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e6      	bne.n	8003e6a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3308      	adds	r3, #8
 8003eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e5      	bne.n	8003e9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e011      	b.n	8003f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3758      	adds	r7, #88	@ 0x58
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f20:	e04f      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d04b      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fc fd25 	bl	8000978 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e04e      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d037      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d034      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d031      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d110      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2208      	movs	r2, #8
 8003f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f838 	bl	8003fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e029      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9c:	d111      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f81e 	bl	8003fea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d0a0      	beq.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b095      	sub	sp, #84	@ 0x54
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
 8004012:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800401e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e6      	bne.n	8003ff2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	61fb      	str	r3, [r7, #28]
   return(result);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800404a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405c:	2b01      	cmp	r3, #1
 800405e:	d118      	bne.n	8004092 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	60bb      	str	r3, [r7, #8]
   return(result);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 0310 	bic.w	r3, r3, #16
 8004074:	647b      	str	r3, [r7, #68]	@ 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	613b      	str	r3, [r7, #16]
   return(result);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e6      	bne.n	8004060 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040a6:	bf00      	nop
 80040a8:	3754      	adds	r7, #84	@ 0x54
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff fc87 	bl	80039e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b088      	sub	sp, #32
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	613b      	str	r3, [r7, #16]
   return(result);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e6      	bne.n	80040e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff fc53 	bl	80039d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800412a:	bf00      	nop
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <memset>:
 8004146:	4402      	add	r2, r0
 8004148:	4603      	mov	r3, r0
 800414a:	4293      	cmp	r3, r2
 800414c:	d100      	bne.n	8004150 <memset+0xa>
 800414e:	4770      	bx	lr
 8004150:	f803 1b01 	strb.w	r1, [r3], #1
 8004154:	e7f9      	b.n	800414a <memset+0x4>
	...

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	@ (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	@ (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	@ (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	@ (800419c <__libc_init_array+0x44>)
 800416c:	f000 f818 	bl	80041a0 <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	080041f0 	.word	0x080041f0
 8004194:	080041f0 	.word	0x080041f0
 8004198:	080041f0 	.word	0x080041f0
 800419c:	080041f4 	.word	0x080041f4

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
