
20250701_can_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003808  08003808  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003808  08003808  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003808  08003808  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003808  08003808  00004808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800380c  0800380c  0000480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003810  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5ca  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f5  00000000  00000000  0000f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00010e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e2  00000000  00000000  000115b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f2b  00000000  00000000  00011b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a0bd  00000000  00000000  0002babd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000997ba  00000000  00000000  00035b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cf334  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea0  00000000  00000000  000cf378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000d1218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037b8 	.word	0x080037b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037b8 	.word	0x080037b8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb59 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f877 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f983 	bl	80004e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f951 	bl	8000480 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001de:	f000 f8c3 	bl	8000368 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f91d 	bl	8000420 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count=0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
  HAL_CAN_Start(&hcan);
 80001ea:	4831      	ldr	r0, [pc, #196]	@ (80002b0 <main+0xe8>)
 80001ec:	f000 fd75 	bl	8000cda <HAL_CAN_Start>
  	 if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80001f0:	2102      	movs	r1, #2
 80001f2:	482f      	ldr	r0, [pc, #188]	@ (80002b0 <main+0xe8>)
 80001f4:	f000 feba 	bl	8000f6c <HAL_CAN_ActivateNotification>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <main+0x3a>
  		    {
  		 	  Error_Handler();
 80001fe:	f000 f9bb 	bl	8000578 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 if(count>10000){
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000208:	4293      	cmp	r3, r2
 800020a:	dd4d      	ble.n	80002a8 <main+0xe0>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);//(GPIOAかBか,ピン)
 800020c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000214:	f001 fba6 	bl	8001964 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800021c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000220:	f001 fba0 	bl	8001964 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000224:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022c:	f001 fb9a 	bl	8001964 <HAL_GPIO_TogglePin>
		count=0;
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]

		TxHeader.StdId = 1234;
 8000234:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <main+0xec>)
 8000236:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 800023a:	601a      	str	r2, [r3, #0]
		TxHeader.RTR = CAN_RTR_DATA;
 800023c:	4b1d      	ldr	r3, [pc, #116]	@ (80002b4 <main+0xec>)
 800023e:	2200      	movs	r2, #0
 8000240:	60da      	str	r2, [r3, #12]
		TxHeader.IDE = CAN_ID_STD;
 8000242:	4b1c      	ldr	r3, [pc, #112]	@ (80002b4 <main+0xec>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
		TxHeader.DLC = 3;
 8000248:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <main+0xec>)
 800024a:	2203      	movs	r2, #3
 800024c:	611a      	str	r2, [r3, #16]
		TxHeader.TransmitGlobalTime = DISABLE;
 800024e:	4b19      	ldr	r3, [pc, #100]	@ (80002b4 <main+0xec>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
		TxData[0] = 100;
 8000254:	4b18      	ldr	r3, [pc, #96]	@ (80002b8 <main+0xf0>)
 8000256:	2264      	movs	r2, #100	@ 0x64
 8000258:	701a      	strb	r2, [r3, #0]
		TxData[1] = 200;
 800025a:	4b17      	ldr	r3, [pc, #92]	@ (80002b8 <main+0xf0>)
 800025c:	22c8      	movs	r2, #200	@ 0xc8
 800025e:	705a      	strb	r2, [r3, #1]
		TxData[2] = cnt;
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <main+0xf4>)
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <main+0xf0>)
 8000266:	709a      	strb	r2, [r3, #2]

		if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000268:	4b15      	ldr	r3, [pc, #84]	@ (80002c0 <main+0xf8>)
 800026a:	4a13      	ldr	r2, [pc, #76]	@ (80002b8 <main+0xf0>)
 800026c:	4911      	ldr	r1, [pc, #68]	@ (80002b4 <main+0xec>)
 800026e:	4810      	ldr	r0, [pc, #64]	@ (80002b0 <main+0xe8>)
 8000270:	f000 fd77 	bl	8000d62 <HAL_CAN_AddTxMessage>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <main+0xb6>
		{
		Error_Handler();
 800027a:	f000 f97d 	bl	8000578 <Error_Handler>
		}
		while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) {}
 800027e:	bf00      	nop
 8000280:	480b      	ldr	r0, [pc, #44]	@ (80002b0 <main+0xe8>)
 8000282:	f000 fe3e 	bl	8000f02 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b03      	cmp	r3, #3
 800028a:	d1f9      	bne.n	8000280 <main+0xb8>

		if(cnt>250){
 800028c:	4b0b      	ldr	r3, [pc, #44]	@ (80002bc <main+0xf4>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2bfa      	cmp	r3, #250	@ 0xfa
 8000292:	d903      	bls.n	800029c <main+0xd4>
		   cnt=0;
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <main+0xf4>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
 800029a:	e005      	b.n	80002a8 <main+0xe0>
		}
		else{
		   cnt++;
 800029c:	4b07      	ldr	r3, [pc, #28]	@ (80002bc <main+0xf4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <main+0xf4>)
 80002a6:	701a      	strb	r2, [r3, #0]
		}
	 }
	 count++;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
	 if(count>10000){
 80002ae:	e7a8      	b.n	8000202 <main+0x3a>
 80002b0:	20000028 	.word	0x20000028
 80002b4:	20000160 	.word	0x20000160
 80002b8:	20000178 	.word	0x20000178
 80002bc:	20000184 	.word	0x20000184
 80002c0:	20000180 	.word	0x20000180

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b096      	sub	sp, #88	@ 0x58
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002ce:	2228      	movs	r2, #40	@ 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 fa43 	bl	800375e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 031c 	add.w	r3, r7, #28
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	2302      	movs	r3, #2
 80002fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000304:	2300      	movs	r3, #0
 8000306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fb43 	bl	8001998 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000318:	f000 f92e 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	f107 031c 	add.w	r3, r7, #28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f002 fb3c 	bl	80029b4 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000342:	f000 f919 	bl	8000578 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000346:	2301      	movs	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f002 fd41 	bl	8002dd8 <HAL_RCCEx_PeriphCLKConfig>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800035c:	f000 f90c 	bl	8000578 <Error_Handler>
  }
}
 8000360:	bf00      	nop
 8000362:	3758      	adds	r7, #88	@ 0x58
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	@ 0x28
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800036e:	4b2a      	ldr	r3, [pc, #168]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000370:	4a2a      	ldr	r2, [pc, #168]	@ (800041c <MX_CAN_Init+0xb4>)
 8000372:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 5;
 8000374:	4b28      	ldr	r3, [pc, #160]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000376:	2205      	movs	r2, #5
 8000378:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800037a:	4b27      	ldr	r3, [pc, #156]	@ (8000418 <MX_CAN_Init+0xb0>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000380:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000386:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000388:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800038c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 800038e:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000390:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000394:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000396:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800039c:	4b1e      	ldr	r3, [pc, #120]	@ (8000418 <MX_CAN_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <MX_CAN_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <MX_CAN_Init+0xb0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000418 <MX_CAN_Init+0xb0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_CAN_Init+0xb0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ba:	4817      	ldr	r0, [pc, #92]	@ (8000418 <MX_CAN_Init+0xb0>)
 80003bc:	f000 fac8 	bl	8000950 <HAL_CAN_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003c6:	f000 f8d7 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x456<<5;
 80003d6:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 80003da:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x456<<5;
 80003dc:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 80003e0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x456<<5;
 80003e2:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 80003e6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x456<<5;
 80003e8:	f648 23c0 	movw	r3, #35520	@ 0x8ac0
 80003ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80003f2:	2301      	movs	r3, #1
 80003f4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80003f6:	230e      	movs	r3, #14
 80003f8:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80003fa:	463b      	mov	r3, r7
 80003fc:	4619      	mov	r1, r3
 80003fe:	4806      	ldr	r0, [pc, #24]	@ (8000418 <MX_CAN_Init+0xb0>)
 8000400:	f000 fba1 	bl	8000b46 <HAL_CAN_ConfigFilter>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_CAN_Init+0xa6>
	{
	  Error_Handler();
 800040a:	f000 f8b5 	bl	8000578 <Error_Handler>
	}
  /* USER CODE END CAN_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	3728      	adds	r7, #40	@ 0x28
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000028 	.word	0x20000028
 800041c:	40006400 	.word	0x40006400

08000420 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	@ (800047c <MX_USART1_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <MX_USART1_UART_Init+0x58>)
 8000464:	f002 fddc 	bl	8003020 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f883 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000050 	.word	0x20000050
 800047c:	40013800 	.word	0x40013800

08000480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 8000486:	4a15      	ldr	r2, [pc, #84]	@ (80004dc <MX_USART2_UART_Init+0x5c>)
 8000488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 800048c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_USART2_UART_Init+0x58>)
 80004c4:	f002 fdac 	bl	8003020 <HAL_UART_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ce:	f000 f853 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200000d8 	.word	0x200000d8
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000574 <MX_GPIO_Init+0x94>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000574 <MX_GPIO_Init+0x94>)
 80004fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b1c      	ldr	r3, [pc, #112]	@ (8000574 <MX_GPIO_Init+0x94>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <MX_GPIO_Init+0x94>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a18      	ldr	r2, [pc, #96]	@ (8000574 <MX_GPIO_Init+0x94>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <MX_GPIO_Init+0x94>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <MX_GPIO_Init+0x94>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <MX_GPIO_Init+0x94>)
 800052c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <MX_GPIO_Init+0x94>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f001 f9f4 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800054c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f001 f872 	bl	8001650 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x44>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x44>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	@ (80005c8 <HAL_MspInit+0x44>)
 80005a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <HAL_MspInit+0x44>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a24      	ldr	r2, [pc, #144]	@ (800067c <HAL_CAN_MspInit+0xb0>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d141      	bne.n	8000672 <HAL_CAN_MspInit+0xa6>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a23      	ldr	r2, [pc, #140]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 80005f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a1d      	ldr	r2, [pc, #116]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <HAL_CAN_MspInit+0xb4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800061e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000630:	2309      	movs	r3, #9
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 f807 	bl	8001650 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_TX_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2013      	movs	r0, #19
 8000648:	f000 ffcb 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_TX_IRQn);
 800064c:	2013      	movs	r0, #19
 800064e:	f000 ffe4 	bl	800161a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2014      	movs	r0, #20
 8000658:	f000 ffc3 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800065c:	2014      	movs	r0, #20
 800065e:	f000 ffdc 	bl	800161a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2015      	movs	r0, #21
 8000668:	f000 ffbb 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800066c:	2015      	movs	r0, #21
 800066e:	f000 ffd4 	bl	800161a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	@ 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40006400 	.word	0x40006400
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	@ 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000760 <HAL_UART_MspInit+0xdc>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d128      	bne.n	80006f8 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d6:	23c0      	movs	r3, #192	@ 0xc0
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006e6:	2307      	movs	r3, #7
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481d      	ldr	r0, [pc, #116]	@ (8000768 <HAL_UART_MspInit+0xe4>)
 80006f2:	f000 ffad 	bl	8001650 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f6:	e02e      	b.n	8000756 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <HAL_UART_MspInit+0xe8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d129      	bne.n	8000756 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000702:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a17      	ldr	r2, [pc, #92]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a11      	ldr	r2, [pc, #68]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <HAL_UART_MspInit+0xe0>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000732:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000744:	2307      	movs	r3, #7
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000752:	f000 ff7d 	bl	8001650 <HAL_GPIO_Init>
}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	@ 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40013800 	.word	0x40013800
 8000764:	40021000 	.word	0x40021000
 8000768:	48000400 	.word	0x48000400
 800076c:	40004400 	.word	0x40004400

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f8a3 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <CAN_TX_IRQHandler>:

/**
  * @brief This function handles CAN TX interrupt.
  */
void CAN_TX_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_TX_IRQn 0 */

  /* USER CODE END CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <CAN_TX_IRQHandler+0x10>)
 80007d6:	f000 fbef 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_TX_IRQn 1 */

  /* USER CODE END CAN_TX_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000028 	.word	0x20000028

080007e4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <CAN_RX0_IRQHandler+0x10>)
 80007ea:	f000 fbe5 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000028 	.word	0x20000028

080007f8 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007fc:	4802      	ldr	r0, [pc, #8]	@ (8000808 <CAN_RX1_IRQHandler+0x10>)
 80007fe:	f000 fbdb 	bl	8000fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000028 	.word	0x20000028

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000868 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff ffea 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f002 ff87 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000862:	f7ff fcb1 	bl	80001c8 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000874:	08003810 	.word	0x08003810
  ldr r2, =_sbss
 8000878:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800087c:	2000018c 	.word	0x2000018c

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 fe99 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff fe70 	bl	8000584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 feb1 	bl	8001636 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 fe79 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000188 	.word	0x20000188

08000938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;  
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000188 	.word	0x20000188

08000950 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e0ed      	b.n	8000b3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fe2c 	bl	80005cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000984:	f7ff ffd8 	bl	8000938 <HAL_GetTick>
 8000988:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800098a:	e012      	b.n	80009b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800098c:	f7ff ffd4 	bl	8000938 <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d90b      	bls.n	80009b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2205      	movs	r2, #5
 80009aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e0c5      	b.n	8000b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d0e5      	beq.n	800098c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0202 	bic.w	r2, r2, #2
 80009ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d0:	f7ff ffb2 	bl	8000938 <HAL_GetTick>
 80009d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009d6:	e012      	b.n	80009fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d8:	f7ff ffae 	bl	8000938 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d90b      	bls.n	80009fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2205      	movs	r2, #5
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e09f      	b.n	8000b3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1e5      	bne.n	80009d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7e1b      	ldrb	r3, [r3, #24]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d108      	bne.n	8000a26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e007      	b.n	8000a36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7e5b      	ldrb	r3, [r3, #25]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d108      	bne.n	8000a50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7e9b      	ldrb	r3, [r3, #26]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d108      	bne.n	8000a7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f042 0220 	orr.w	r2, r2, #32
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	e007      	b.n	8000a8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0220 	bic.w	r2, r2, #32
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7edb      	ldrb	r3, [r3, #27]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d108      	bne.n	8000aa4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 0210 	bic.w	r2, r2, #16
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0210 	orr.w	r2, r2, #16
 8000ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	7f1b      	ldrb	r3, [r3, #28]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d108      	bne.n	8000ace <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 0208 	orr.w	r2, r2, #8
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	e007      	b.n	8000ade <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 0208 	bic.w	r2, r2, #8
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7f5b      	ldrb	r3, [r3, #29]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d108      	bne.n	8000af8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0204 	orr.w	r2, r2, #4
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e007      	b.n	8000b08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0204 	bic.w	r2, r2, #4
 8000b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	ea42 0103 	orr.w	r1, r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b087      	sub	sp, #28
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b5e:	7cfb      	ldrb	r3, [r7, #19]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d003      	beq.n	8000b6c <HAL_CAN_ConfigFilter+0x26>
 8000b64:	7cfb      	ldrb	r3, [r7, #19]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	f040 80aa 	bne.w	8000cc0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b72:	f043 0201 	orr.w	r2, r3, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	2201      	movs	r2, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d123      	bne.n	8000bee <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	401a      	ands	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3248      	adds	r2, #72	@ 0x48
 8000bce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000be2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000be4:	6979      	ldr	r1, [r7, #20]
 8000be6:	3348      	adds	r3, #72	@ 0x48
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d122      	bne.n	8000c3c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3248      	adds	r2, #72	@ 0x48
 8000c1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c32:	6979      	ldr	r1, [r7, #20]
 8000c34:	3348      	adds	r3, #72	@ 0x48
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c56:	e007      	b.n	8000c68 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d109      	bne.n	8000c84 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c82:	e007      	b.n	8000c94 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d107      	bne.n	8000cac <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cb2:	f023 0201 	bic.w	r2, r3, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e006      	b.n	8000cce <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
  }
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d12e      	bne.n	8000d4c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d06:	f7ff fe17 	bl	8000938 <HAL_GetTick>
 8000d0a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d0c:	e012      	b.n	8000d34 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d0e:	f7ff fe13 	bl	8000938 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b0a      	cmp	r3, #10
 8000d1a:	d90b      	bls.n	8000d34 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2205      	movs	r2, #5
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e012      	b.n	8000d5a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1e5      	bne.n	8000d0e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e006      	b.n	8000d5a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d50:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
  }
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b089      	sub	sp, #36	@ 0x24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d003      	beq.n	8000d8e <HAL_CAN_AddTxMessage+0x2c>
 8000d86:	7ffb      	ldrb	r3, [r7, #31]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	f040 80ad 	bne.w	8000ee8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10a      	bne.n	8000dae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d105      	bne.n	8000dae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 8095 	beq.w	8000ed8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	0e1b      	lsrs	r3, r3, #24
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000db8:	2201      	movs	r2, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10d      	bne.n	8000de6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6809      	ldr	r1, [r1, #0]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	440b      	add	r3, r1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e00f      	b.n	8000e06 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df6:	68f9      	ldr	r1, [r7, #12]
 8000df8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dfa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3318      	adds	r3, #24
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	440b      	add	r3, r1
 8000e04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3318      	adds	r3, #24
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	3304      	adds	r3, #4
 8000e18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	7d1b      	ldrb	r3, [r3, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d111      	bne.n	8000e46 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	440b      	add	r3, r1
 8000e42:	3304      	adds	r3, #4
 8000e44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3307      	adds	r3, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	061a      	lsls	r2, r3, #24
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3306      	adds	r3, #6
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	4313      	orrs	r3, r2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3204      	adds	r2, #4
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4610      	mov	r0, r2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	ea43 0200 	orr.w	r2, r3, r0
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3303      	adds	r3, #3
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	061a      	lsls	r2, r3, #24
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3302      	adds	r3, #2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	ea43 0200 	orr.w	r2, r3, r0
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000eb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3318      	adds	r3, #24
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	6811      	ldr	r1, [r2, #0]
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3318      	adds	r3, #24
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	440b      	add	r3, r1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e00e      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000edc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e006      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b085      	sub	sp, #20
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d002      	beq.n	8000f22 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d11d      	bne.n	8000f5e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	3301      	adds	r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d002      	beq.n	8000f8a <HAL_CAN_ActivateNotification+0x1e>
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d109      	bne.n	8000f9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6959      	ldr	r1, [r3, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e006      	b.n	8000fac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
  }
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d07c      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d023      	beq.n	8001050 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2201      	movs	r2, #1
 800100e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f983 	bl	8001326 <HAL_CAN_TxMailbox0CompleteCallback>
 8001020:	e016      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
 8001034:	e00c      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
 8001048:	e002      	b.n	8001050 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f989 	bl	8001362 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d024      	beq.n	80010a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001062:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f963 	bl	800133a <HAL_CAN_TxMailbox1CompleteCallback>
 8001074:	e016      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
 8001088:	e00c      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
 800109c:	e002      	b.n	80010a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f969 	bl	8001376 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d024      	beq.n	80010f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f943 	bl	800134e <HAL_CAN_TxMailbox2CompleteCallback>
 80010c8:	e016      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
 80010dc:	e00c      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80010f0:	e002      	b.n	80010f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f949 	bl	800138a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800110c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2210      	movs	r2, #16
 800111a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2208      	movs	r2, #8
 8001136:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f93a 	bl	80013b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f921 	bl	800139e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00c      	beq.n	8001180 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2210      	movs	r2, #16
 800117e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2208      	movs	r2, #8
 800119a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f91c 	bl	80013da <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d009      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f903 	bl	80013c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2210      	movs	r2, #16
 80011da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f906 	bl	80013ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00b      	beq.n	8001204 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2208      	movs	r2, #8
 80011fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8ff 	bl	8001402 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d07b      	beq.n	8001306 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d072      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001272:	2b00      	cmp	r3, #0
 8001274:	d043      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800127c:	2b00      	cmp	r3, #0
 800127e:	d03e      	beq.n	80012fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001286:	2b60      	cmp	r3, #96	@ 0x60
 8001288:	d02b      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x32a>
 800128a:	2b60      	cmp	r3, #96	@ 0x60
 800128c:	d82e      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 800128e:	2b50      	cmp	r3, #80	@ 0x50
 8001290:	d022      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x320>
 8001292:	2b50      	cmp	r3, #80	@ 0x50
 8001294:	d82a      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 8001296:	2b40      	cmp	r3, #64	@ 0x40
 8001298:	d019      	beq.n	80012ce <HAL_CAN_IRQHandler+0x316>
 800129a:	2b40      	cmp	r3, #64	@ 0x40
 800129c:	d826      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 800129e:	2b30      	cmp	r3, #48	@ 0x30
 80012a0:	d010      	beq.n	80012c4 <HAL_CAN_IRQHandler+0x30c>
 80012a2:	2b30      	cmp	r3, #48	@ 0x30
 80012a4:	d822      	bhi.n	80012ec <HAL_CAN_IRQHandler+0x334>
 80012a6:	2b10      	cmp	r3, #16
 80012a8:	d002      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x2f8>
 80012aa:	2b20      	cmp	r3, #32
 80012ac:	d005      	beq.n	80012ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012ae:	e01d      	b.n	80012ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012b8:	e019      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012c2:	e014      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012cc:	e00f      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012d6:	e00a      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012e0:	e005      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80012ea:	e000      	b.n	80012ee <HAL_CAN_IRQHandler+0x336>
            break;
 80012ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80012fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2204      	movs	r2, #4
 8001304:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f87c 	bl	8001416 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	@ (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	@ 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff3e 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff31 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e14e      	b.n	80018fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8140 	beq.w	80018f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 809a 	beq.w	80018f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b55      	ldr	r3, [pc, #340]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a54      	ldr	r2, [pc, #336]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b52      	ldr	r3, [pc, #328]	@ (800191c <HAL_GPIO_Init+0x2cc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a50      	ldr	r2, [pc, #320]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001806:	d013      	beq.n	8001830 <HAL_GPIO_Init+0x1e0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a46      	ldr	r2, [pc, #280]	@ (8001924 <HAL_GPIO_Init+0x2d4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1dc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a45      	ldr	r2, [pc, #276]	@ (8001928 <HAL_GPIO_Init+0x2d8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1d8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a44      	ldr	r2, [pc, #272]	@ (800192c <HAL_GPIO_Init+0x2dc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1d4>
 8001820:	2303      	movs	r3, #3
 8001822:	e006      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001824:	2305      	movs	r3, #5
 8001826:	e004      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001828:	2302      	movs	r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <HAL_GPIO_Init+0x1e2>
 8001830:	2300      	movs	r3, #0
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	f002 0203 	and.w	r2, r2, #3
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	4093      	lsls	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001842:	4937      	ldr	r1, [pc, #220]	@ (8001920 <HAL_GPIO_Init+0x2d0>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001850:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001874:	4a2e      	ldr	r2, [pc, #184]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	43db      	mvns	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4013      	ands	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800189e:	4a24      	ldr	r2, [pc, #144]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a4:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c8:	4a19      	ldr	r2, [pc, #100]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_GPIO_Init+0x2e0>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	f47f aea9 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	48000c00 	.word	0x48000c00
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001950:	e002      	b.n	8001958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43d9      	mvns	r1, r3
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	400b      	ands	r3, r1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800199e:	af00      	add	r7, sp, #0
 80019a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f000 bff4 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 816d 	beq.w	8001cae <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019d4:	4bb4      	ldr	r3, [pc, #720]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d00c      	beq.n	80019fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e0:	4bb1      	ldr	r3, [pc, #708]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x104>
 80019ec:	4bae      	ldr	r3, [pc, #696]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f8:	d150      	bne.n	8001a9c <HAL_RCC_OscConfig+0x104>
 80019fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019fe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a1a:	d802      	bhi.n	8001a22 <HAL_RCC_OscConfig+0x8a>
 8001a1c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0xb6>
 8001a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a26:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a3a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001a3e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001a4a:	4b97      	ldr	r3, [pc, #604]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a52:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001a56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001a62:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8114 	beq.w	8001cac <HAL_RCC_OscConfig+0x314>
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 810b 	bne.w	8001cac <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f000 bf85 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x124>
 8001aae:	4b7e      	ldr	r3, [pc, #504]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e036      	b.n	8001b2a <HAL_RCC_OscConfig+0x192>
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10c      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x14e>
 8001acc:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b73      	ldr	r3, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a72      	ldr	r2, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e021      	b.n	8001b2a <HAL_RCC_OscConfig+0x192>
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x17a>
 8001af8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b68      	ldr	r3, [pc, #416]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a67      	ldr	r2, [pc, #412]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x192>
 8001b12:	4b65      	ldr	r3, [pc, #404]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a64      	ldr	r2, [pc, #400]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a61      	ldr	r2, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	f023 020f 	bic.w	r2, r3, #15
 8001b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	495a      	ldr	r1, [pc, #360]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d054      	beq.n	8001bfe <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe fef0 	bl	8000938 <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5e:	f7fe feeb 	bl	8000938 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d902      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f000 bf19 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8001b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b78:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001b88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b94:	d802      	bhi.n	8001b9c <HAL_RCC_OscConfig+0x204>
 8001b96:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e015      	b.n	8001bc8 <HAL_RCC_OscConfig+0x230>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001bb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bcc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001bd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001bdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0b0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1c6>
 8001bfc:	e057      	b.n	8001cae <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe9b 	bl	8000938 <HAL_GetTick>
 8001c02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c08:	f7fe fe96 	bl	8000938 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	@ 0x64
 8001c16:	d902      	bls.n	8001c1e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	f000 bec4 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8001c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c22:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c3e:	d802      	bhi.n	8001c46 <HAL_RCC_OscConfig+0x2ae>
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	e015      	b.n	8001c72 <HAL_RCC_OscConfig+0x2da>
 8001c46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001c5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c5e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001c62:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_RCC_OscConfig+0x310>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c76:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001c7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001c86:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001c8a:	fab2 f282 	clz	r2, r2
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	f042 0220 	orr.w	r2, r2, #32
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1b0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x270>
 8001ca6:	e002      	b.n	8001cae <HAL_RCC_OscConfig+0x316>
 8001ca8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 816c 	beq.w	8001f9c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cc4:	4bcc      	ldr	r3, [pc, #816]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cd0:	4bc9      	ldr	r3, [pc, #804]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d16d      	bne.n	8001db8 <HAL_RCC_OscConfig+0x420>
 8001cdc:	4bc6      	ldr	r3, [pc, #792]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d167      	bne.n	8001db8 <HAL_RCC_OscConfig+0x420>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001cfa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d06:	d802      	bhi.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001d08:	4bbb      	ldr	r3, [pc, #748]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	e013      	b.n	8001d36 <HAL_RCC_OscConfig+0x39e>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001d20:	2302      	movs	r3, #2
 8001d22:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001d26:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001d32:	4bb1      	ldr	r3, [pc, #708]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	2202      	movs	r2, #2
 8001d38:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001d3c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001d40:	fa92 f2a2 	rbit	r2, r2
 8001d44:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001d48:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCC_OscConfig+0x3e6>
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d002      	beq.n	8001d7e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f000 be14 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	21f8      	movs	r1, #248	@ 0xf8
 8001d94:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001d9c:	fa91 f1a1 	rbit	r1, r1
 8001da0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001da4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001da8:	fab1 f181 	clz	r1, r1
 8001dac:	b2c9      	uxtb	r1, r1
 8001dae:	408b      	lsls	r3, r1
 8001db0:	4991      	ldr	r1, [pc, #580]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e0f1      	b.n	8001f9c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 8083 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x538>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001ddc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001dea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	2301      	movs	r3, #1
 8001df4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fd9f 	bl	8000938 <HAL_GetTick>
 8001dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7fe fd9a 	bl	8000938 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d902      	bls.n	8001e16 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	f000 bdc8 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001e28:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e34:	d802      	bhi.n	8001e3c <HAL_RCC_OscConfig+0x4a4>
 8001e36:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x4cc>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001e54:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001e60:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001e6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001e76:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0b4      	beq.n	8001e00 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b58      	ldr	r3, [pc, #352]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	21f8      	movs	r1, #248	@ 0xf8
 8001eac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001eb4:	fa91 f1a1 	rbit	r1, r1
 8001eb8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001ebc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001ec0:	fab1 f181 	clz	r1, r1
 8001ec4:	b2c9      	uxtb	r1, r1
 8001ec6:	408b      	lsls	r3, r1
 8001ec8:	494b      	ldr	r1, [pc, #300]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	e065      	b.n	8001f9c <HAL_RCC_OscConfig+0x604>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ef0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fd1c 	bl	8000938 <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7fe fd17 	bl	8000938 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d902      	bls.n	8001f1c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f000 bd45 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f3a:	d802      	bhi.n	8001f42 <HAL_RCC_OscConfig+0x5aa>
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e013      	b.n	8001f6a <HAL_RCC_OscConfig+0x5d2>
 8001f42:	2302      	movs	r3, #2
 8001f44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f54:	2302      	movs	r3, #2
 8001f56:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f66:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_RCC_OscConfig+0x660>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001f70:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001f7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f002 021f 	and.w	r2, r2, #31
 8001f90:	2101      	movs	r1, #1
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1b4      	bne.n	8001f06 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8115 	beq.w	80021dc <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07e      	beq.n	80020c0 <HAL_RCC_OscConfig+0x728>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_RCC_OscConfig+0x664>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fca4 	bl	8000938 <HAL_GetTick>
 8001ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff4:	e00f      	b.n	8002016 <HAL_RCC_OscConfig+0x67e>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe fc9a 	bl	8000938 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d902      	bls.n	8002016 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	f000 bcc8 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002030:	2202      	movs	r2, #2
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	fa93 f2a3 	rbit	r2, r3
 8002066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800206e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002070:	4bb0      	ldr	r3, [pc, #704]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 8002072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002078:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800207c:	2102      	movs	r1, #2
 800207e:	6019      	str	r1, [r3, #0]
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	fa93 f1a3 	rbit	r1, r3
 800208e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002092:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002096:	6019      	str	r1, [r3, #0]
  return result;
 8002098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0a0      	beq.n	8002000 <HAL_RCC_OscConfig+0x668>
 80020be:	e08d      	b.n	80021dc <HAL_RCC_OscConfig+0x844>
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020e2:	601a      	str	r2, [r3, #0]
  return result;
 80020e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80020ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b90      	ldr	r3, [pc, #576]	@ (8002338 <HAL_RCC_OscConfig+0x9a0>)
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	461a      	mov	r2, r3
 80020fe:	2300      	movs	r3, #0
 8002100:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe fc19 	bl	8000938 <HAL_GetTick>
 8002106:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210c:	f7fe fc14 	bl	8000938 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d902      	bls.n	8002122 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	f000 bc42 	b.w	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800212a:	2202      	movs	r2, #2
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002156:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002172:	2202      	movs	r2, #2
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800218c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	4b69      	ldr	r3, [pc, #420]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 8002190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800219a:	2102      	movs	r1, #2
 800219c:	6019      	str	r1, [r3, #0]
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	fa93 f1a3 	rbit	r1, r3
 80021ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021b4:	6019      	str	r1, [r3, #0]
  return result;
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d197      	bne.n	800210c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 819e 	beq.w	800252e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d116      	bne.n	8002232 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4b4b      	ldr	r3, [pc, #300]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a4a      	ldr	r2, [pc, #296]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 800220a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
 8002210:	4b48      	ldr	r3, [pc, #288]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800222a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b42      	ldr	r3, [pc, #264]	@ (800233c <HAL_RCC_OscConfig+0x9a4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11a      	bne.n	8002274 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b3f      	ldr	r3, [pc, #252]	@ (800233c <HAL_RCC_OscConfig+0x9a4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3e      	ldr	r2, [pc, #248]	@ (800233c <HAL_RCC_OscConfig+0x9a4>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fb75 	bl	8000938 <HAL_GetTick>
 800224e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	e009      	b.n	8002268 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe fb70 	bl	8000938 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b64      	cmp	r3, #100	@ 0x64
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e39e      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <HAL_RCC_OscConfig+0x9a4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ef      	beq.n	8002254 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002278:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x8fa>
 8002284:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a2a      	ldr	r2, [pc, #168]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e035      	b.n	80022fe <HAL_RCC_OscConfig+0x966>
 8002292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x924>
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a23      	ldr	r2, [pc, #140]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a20      	ldr	r2, [pc, #128]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e020      	b.n	80022fe <HAL_RCC_OscConfig+0x966>
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x94e>
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a18      	ldr	r2, [pc, #96]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b16      	ldr	r3, [pc, #88]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a15      	ldr	r2, [pc, #84]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x966>
 80022e6:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a12      	ldr	r2, [pc, #72]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002334 <HAL_RCC_OscConfig+0x99c>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002302:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe fb12 	bl	8000938 <HAL_GetTick>
 8002314:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e012      	b.n	8002340 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fb0d 	bl	8000938 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d908      	bls.n	8002340 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e339      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	10908120 	.word	0x10908120
 800233c:	40007000 	.word	0x40007000
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002374:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002382:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002386:	601a      	str	r2, [r3, #0]
  return result;
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002390:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0xa10>
 80023a2:	4b98      	ldr	r3, [pc, #608]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0xa38>
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023d4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023d8:	2102      	movs	r1, #2
 80023da:	6011      	str	r1, [r2, #0]
 80023dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	fa92 f1a2 	rbit	r1, r2
 80023ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ee:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023f2:	6011      	str	r1, [r2, #0]
  return result;
 80023f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	fab2 f282 	clz	r2, r2
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f002 021f 	and.w	r2, r2, #31
 800240e:	2101      	movs	r1, #1
 8002410:	fa01 f202 	lsl.w	r2, r1, r2
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	f43f af7f 	beq.w	800231a <HAL_RCC_OscConfig+0x982>
 800241c:	e07d      	b.n	800251a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fa8b 	bl	8000938 <HAL_GetTick>
 8002422:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fa86 	bl	8000938 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e2b2      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800246c:	2202      	movs	r2, #2
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002486:	601a      	str	r2, [r3, #0]
  return result;
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002490:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_OscConfig+0xb10>
 80024a2:	4b58      	ldr	r3, [pc, #352]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	e013      	b.n	80024d0 <HAL_RCC_OscConfig+0xb38>
 80024a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ac:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024b0:	2202      	movs	r2, #2
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024d8:	2102      	movs	r1, #2
 80024da:	6011      	str	r1, [r2, #0]
 80024dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	fa92 f1a2 	rbit	r1, r2
 80024ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024ee:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024f2:	6011      	str	r1, [r2, #0]
  return result;
 80024f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d186      	bne.n	8002428 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800251e:	2b01      	cmp	r3, #1
 8002520:	d105      	bne.n	800252e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002522:	4b38      	ldr	r3, [pc, #224]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a37      	ldr	r2, [pc, #220]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 8002528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800252e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8232 	beq.w	80029a4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	f000 8201 	beq.w	8002950 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	2b02      	cmp	r3, #2
 800255c:	f040 8157 	bne.w	800280e <HAL_RCC_OscConfig+0xe76>
 8002560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002564:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002568:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002580:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002584:	601a      	str	r2, [r3, #0]
  return result;
 8002586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800258e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	fab3 f383 	clz	r3, r3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800259a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	461a      	mov	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe f9c7 	bl	8000938 <HAL_GetTick>
 80025aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	e009      	b.n	80025c4 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe f9c2 	bl	8000938 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1f0      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fa93 f2a3 	rbit	r2, r3
 80025e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025e8:	601a      	str	r2, [r3, #0]
  return result;
 80025ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80025f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80025fc:	d804      	bhi.n	8002608 <HAL_RCC_OscConfig+0xc70>
 80025fe:	4b01      	ldr	r3, [pc, #4]	@ (8002604 <HAL_RCC_OscConfig+0xc6c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e029      	b.n	8002658 <HAL_RCC_OscConfig+0xcc0>
 8002604:	40021000 	.word	0x40021000
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002640:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	4bc3      	ldr	r3, [pc, #780]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800265c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002660:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002664:	6011      	str	r1, [r2, #0]
 8002666:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800266a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	fa92 f1a2 	rbit	r1, r2
 8002674:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002678:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800267c:	6011      	str	r1, [r2, #0]
  return result;
 800267e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002682:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f042 0220 	orr.w	r2, r2, #32
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f002 021f 	and.w	r2, r2, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d185      	bne.n	80025b0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a4:	4baf      	ldr	r3, [pc, #700]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	49a7      	ldr	r1, [pc, #668]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026f0:	601a      	str	r2, [r3, #0]
  return result;
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80026fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002706:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	461a      	mov	r2, r3
 800270e:	2301      	movs	r3, #1
 8002710:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe f911 	bl	8000938 <HAL_GetTick>
 8002716:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271a:	e009      	b.n	8002730 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe f90c 	bl	8000938 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e13a      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800273c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002750:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800275e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b3f      	cmp	r3, #63	@ 0x3f
 8002768:	d802      	bhi.n	8002770 <HAL_RCC_OscConfig+0xdd8>
 800276a:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e027      	b.n	80027c0 <HAL_RCC_OscConfig+0xe28>
 8002770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002774:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800279e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	4b69      	ldr	r3, [pc, #420]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027d2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	fa92 f1a2 	rbit	r1, r2
 80027dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027e4:	6011      	str	r1, [r2, #0]
  return result;
 80027e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fab2 f282 	clz	r2, r2
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f042 0220 	orr.w	r2, r2, #32
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f002 021f 	and.w	r2, r2, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f202 	lsl.w	r2, r1, r2
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d087      	beq.n	800271c <HAL_RCC_OscConfig+0xd84>
 800280c:	e0ca      	b.n	80029a4 <HAL_RCC_OscConfig+0x100c>
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002816:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800281a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fa93 f2a3 	rbit	r2, r3
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002832:	601a      	str	r2, [r3, #0]
  return result;
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f870 	bl	8000938 <HAL_GetTick>
 8002858:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f86b 	bl	8000938 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e099      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800287a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002896:	601a      	str	r2, [r3, #0]
  return result;
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80028a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80028aa:	d802      	bhi.n	80028b2 <HAL_RCC_OscConfig+0xf1a>
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e027      	b.n	8002902 <HAL_RCC_OscConfig+0xf6a>
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	fa93 f2a3 	rbit	r2, r3
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_RCC_OscConfig+0xfcc>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002906:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800290a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800290e:	6011      	str	r1, [r2, #0]
 8002910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002914:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fa92 f1a2 	rbit	r1, r2
 800291e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002922:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002926:	6011      	str	r1, [r2, #0]
  return result;
 8002928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800292c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	fab2 f282 	clz	r2, r2
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f042 0220 	orr.w	r2, r2, #32
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f002 021f 	and.w	r2, r2, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f202 	lsl.w	r2, r1, r2
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d187      	bne.n	800285e <HAL_RCC_OscConfig+0xec6>
 800294e:	e029      	b.n	80029a4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d103      	bne.n	8002968 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e020      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
 8002964:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <HAL_RCC_OscConfig+0x1018>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002970:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	429a      	cmp	r2, r3
 8002986:	d10b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002988:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800298c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000

080029b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b09e      	sub	sp, #120	@ 0x78
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e154      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	4b89      	ldr	r3, [pc, #548]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d910      	bls.n	80029fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b86      	ldr	r3, [pc, #536]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4984      	ldr	r1, [pc, #528]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b82      	ldr	r3, [pc, #520]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e13c      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4978      	ldr	r1, [pc, #480]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80cd 	beq.w	8002bc2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d137      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xec>
 8002a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a48:	d802      	bhi.n	8002a50 <HAL_RCC_ClockConfig+0x9c>
 8002a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_ClockConfig+0xbc>
 8002a50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a6c:	4b62      	ldr	r3, [pc, #392]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d171      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ea      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d137      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x164>
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac0:	d802      	bhi.n	8002ac8 <HAL_RCC_ClockConfig+0x114>
 8002ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	e00f      	b.n	8002ae8 <HAL_RCC_ClockConfig+0x134>
 8002ac8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002acc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8002adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae4:	4b44      	ldr	r3, [pc, #272]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af0:	fa92 f2a2 	rbit	r2, r2
 8002af4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002af6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f042 0220 	orr.w	r2, r2, #32
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f002 021f 	and.w	r2, r2, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d135      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ae      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b2e:	d802      	bhi.n	8002b36 <HAL_RCC_ClockConfig+0x182>
 8002b30:	4b31      	ldr	r3, [pc, #196]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	e00d      	b.n	8002b52 <HAL_RCC_ClockConfig+0x19e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	2302      	movs	r3, #2
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2202      	movs	r2, #2
 8002b54:	61ba      	str	r2, [r7, #24]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	fa92 f2a2 	rbit	r2, r2
 8002b5c:	617a      	str	r2, [r7, #20]
  return result;
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	fab2 f282 	clz	r2, r2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f042 0220 	orr.w	r2, r2, #32
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	f002 021f 	and.w	r2, r2, #31
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e07a      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b80:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 0203 	bic.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	491a      	ldr	r1, [pc, #104]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b92:	f7fd fed1 	bl	8000938 <HAL_GetTick>
 8002b96:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9a:	f7fd fecd 	bl	8000938 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e062      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 020c 	and.w	r2, r3, #12
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d1eb      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d215      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd0:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 0207 	bic.w	r2, r3, #7
 8002bd8:	4906      	ldr	r1, [pc, #24]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <HAL_RCC_ClockConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d006      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e041      	b.n	8002c76 <HAL_RCC_ClockConfig+0x2c2>
 8002bf2:	bf00      	nop
 8002bf4:	40022000 	.word	0x40022000
 8002bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <HAL_RCC_ClockConfig+0x2cc>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	491a      	ldr	r1, [pc, #104]	@ (8002c80 <HAL_RCC_ClockConfig+0x2cc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_RCC_ClockConfig+0x2cc>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4912      	ldr	r1, [pc, #72]	@ (8002c80 <HAL_RCC_ClockConfig+0x2cc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c3a:	f000 f829 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4601      	mov	r1, r0
 8002c40:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_RCC_ClockConfig+0x2cc>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c48:	22f0      	movs	r2, #240	@ 0xf0
 8002c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	fa92 f2a2 	rbit	r2, r2
 8002c52:	60fa      	str	r2, [r7, #12]
  return result;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	fab2 f282 	clz	r2, r2
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	40d3      	lsrs	r3, r2
 8002c5e:	4a09      	ldr	r2, [pc, #36]	@ (8002c84 <HAL_RCC_ClockConfig+0x2d0>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	fa21 f303 	lsr.w	r3, r1, r3
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <HAL_RCC_ClockConfig+0x2d4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_RCC_ClockConfig+0x2d8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fe1e 	bl	80008b0 <HAL_InitTick>
  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3778      	adds	r7, #120	@ 0x78
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	080037d0 	.word	0x080037d0
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002caa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d002      	beq.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cbe:	e026      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cc2:	613b      	str	r3, [r7, #16]
      break;
 8002cc4:	e026      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	0c9b      	lsrs	r3, r3, #18
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	4a17      	ldr	r2, [pc, #92]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd0:	5cd3      	ldrb	r3, [r2, r3]
 8002cd2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002cd4:	4b13      	ldr	r3, [pc, #76]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cde:	5cd3      	ldrb	r3, [r2, r3]
 8002ce0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cec:	4a0e      	ldr	r2, [pc, #56]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e004      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0c      	ldr	r2, [pc, #48]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
      break;
 8002d0c:	e002      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d10:	613b      	str	r3, [r7, #16]
      break;
 8002d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d14:	693b      	ldr	r3, [r7, #16]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	007a1200 	.word	0x007a1200
 8002d2c:	080037e8 	.word	0x080037e8
 8002d30:	080037f8 	.word	0x080037f8
 8002d34:	003d0900 	.word	0x003d0900

08002d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d56:	f7ff ffef 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d64:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	fa92 f2a2 	rbit	r2, r2
 8002d70:	603a      	str	r2, [r7, #0]
  return result;
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	fab2 f282 	clz	r2, r2
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	40d3      	lsrs	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	080037e0 	.word	0x080037e0

08002d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d9a:	f7ff ffcd 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d9e:	4601      	mov	r1, r0
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002da8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	fa92 f2a2 	rbit	r2, r2
 8002db4:	603a      	str	r2, [r7, #0]
  return result;
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	40d3      	lsrs	r3, r2
 8002dc0:	4a04      	ldr	r2, [pc, #16]	@ (8002dd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	080037e0 	.word	0x080037e0

08002dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b092      	sub	sp, #72	@ 0x48
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80cb 	beq.w	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfc:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10e      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b82      	ldr	r3, [pc, #520]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4a81      	ldr	r2, [pc, #516]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	61d3      	str	r3, [r2, #28]
 8002e14:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b7c      	ldr	r3, [pc, #496]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d118      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e32:	4b79      	ldr	r3, [pc, #484]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a78      	ldr	r2, [pc, #480]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3e:	f7fd fd7b 	bl	8000938 <HAL_GetTick>
 8002e42:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	e008      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fd fd77 	bl	8000938 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b64      	cmp	r3, #100	@ 0x64
 8002e52:	d901      	bls.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0d9      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e58:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e64:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d07b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d074      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e82:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e90:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2301      	movs	r3, #1
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b54      	ldr	r3, [pc, #336]	@ (800301c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ed4:	4a4f      	ldr	r2, [pc, #316]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d043      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fd fd28 	bl	8000938 <HAL_GetTick>
 8002ee8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eea:	e00a      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eec:	f7fd fd24 	bl	8000938 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e084      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002f02:	2302      	movs	r3, #2
 8002f04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0e:	2302      	movs	r3, #2
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	61fb      	str	r3, [r7, #28]
  return result;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002f2c:	4b39      	ldr	r3, [pc, #228]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	e007      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	4b35      	ldr	r3, [pc, #212]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	2202      	movs	r2, #2
 8002f44:	613a      	str	r2, [r7, #16]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f002 021f 	and.w	r2, r2, #31
 8002f60:	2101      	movs	r1, #1
 8002f62:	fa01 f202 	lsl.w	r2, r1, r2
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0bf      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f6c:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4926      	ldr	r1, [pc, #152]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	491a      	ldr	r1, [pc, #104]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	f023 0210 	bic.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4912      	ldr	r1, [pc, #72]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	490b      	ldr	r1, [pc, #44]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4903      	ldr	r1, [pc, #12]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3748      	adds	r7, #72	@ 0x48
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
 800301c:	10908100 	.word	0x10908100

08003020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e040      	b.n	80030b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fb1e 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	@ 0x24
 800304c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f95e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f825 	bl	80030bc <UART_SetConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e01b      	b.n	80030b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f9dd 	bl	800346c <UART_CheckIdleState>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003310 <UART_SetConfig+0x254>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	6979      	ldr	r1, [r7, #20]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a78      	ldr	r2, [pc, #480]	@ (8003314 <UART_SetConfig+0x258>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d120      	bne.n	800317a <UART_SetConfig+0xbe>
 8003138:	4b77      	ldr	r3, [pc, #476]	@ (8003318 <UART_SetConfig+0x25c>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b03      	cmp	r3, #3
 8003142:	d817      	bhi.n	8003174 <UART_SetConfig+0xb8>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <UART_SetConfig+0x90>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003169 	.word	0x08003169
 8003154:	0800316f 	.word	0x0800316f
 8003158:	08003163 	.word	0x08003163
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e01d      	b.n	800319e <UART_SetConfig+0xe2>
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e01a      	b.n	800319e <UART_SetConfig+0xe2>
 8003168:	2304      	movs	r3, #4
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e017      	b.n	800319e <UART_SetConfig+0xe2>
 800316e:	2308      	movs	r3, #8
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e014      	b.n	800319e <UART_SetConfig+0xe2>
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e011      	b.n	800319e <UART_SetConfig+0xe2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a67      	ldr	r2, [pc, #412]	@ (800331c <UART_SetConfig+0x260>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d102      	bne.n	800318a <UART_SetConfig+0xce>
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e009      	b.n	800319e <UART_SetConfig+0xe2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a64      	ldr	r2, [pc, #400]	@ (8003320 <UART_SetConfig+0x264>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d102      	bne.n	800319a <UART_SetConfig+0xde>
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e001      	b.n	800319e <UART_SetConfig+0xe2>
 800319a:	2310      	movs	r3, #16
 800319c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031a6:	d15a      	bne.n	800325e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d827      	bhi.n	80031fe <UART_SetConfig+0x142>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <UART_SetConfig+0xf8>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	080031e1 	.word	0x080031e1
 80031bc:	080031e9 	.word	0x080031e9
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	080031ef 	.word	0x080031ef
 80031c8:	080031ff 	.word	0x080031ff
 80031cc:	080031ff 	.word	0x080031ff
 80031d0:	080031ff 	.word	0x080031ff
 80031d4:	080031f7 	.word	0x080031f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7ff fdba 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80031dc:	61b8      	str	r0, [r7, #24]
        break;
 80031de:	e013      	b.n	8003208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e0:	f7ff fdd8 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 80031e4:	61b8      	str	r0, [r7, #24]
        break;
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003324 <UART_SetConfig+0x268>)
 80031ea:	61bb      	str	r3, [r7, #24]
        break;
 80031ec:	e00c      	b.n	8003208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ee:	f7ff fd4f 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 80031f2:	61b8      	str	r0, [r7, #24]
        break;
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fa:	61bb      	str	r3, [r7, #24]
        break;
 80031fc:	e004      	b.n	8003208 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77bb      	strb	r3, [r7, #30]
        break;
 8003206:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d074      	beq.n	80032f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	005a      	lsls	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	d916      	bls.n	8003258 <UART_SetConfig+0x19c>
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003230:	d212      	bcs.n	8003258 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f023 030f 	bic.w	r3, r3, #15
 800323a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	b29a      	uxth	r2, r3
 8003248:	89fb      	ldrh	r3, [r7, #14]
 800324a:	4313      	orrs	r3, r2
 800324c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	89fa      	ldrh	r2, [r7, #14]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e04f      	b.n	80032f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	77bb      	strb	r3, [r7, #30]
 800325c:	e04c      	b.n	80032f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d828      	bhi.n	80032b6 <UART_SetConfig+0x1fa>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <UART_SetConfig+0x1b0>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	08003291 	.word	0x08003291
 8003270:	08003299 	.word	0x08003299
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032a7 	.word	0x080032a7
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032b7 	.word	0x080032b7
 8003288:	080032b7 	.word	0x080032b7
 800328c:	080032af 	.word	0x080032af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff fd5e 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003294:	61b8      	str	r0, [r7, #24]
        break;
 8003296:	e013      	b.n	80032c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7ff fd7c 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 800329c:	61b8      	str	r0, [r7, #24]
        break;
 800329e:	e00f      	b.n	80032c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a0:	4b20      	ldr	r3, [pc, #128]	@ (8003324 <UART_SetConfig+0x268>)
 80032a2:	61bb      	str	r3, [r7, #24]
        break;
 80032a4:	e00c      	b.n	80032c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a6:	f7ff fcf3 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 80032aa:	61b8      	str	r0, [r7, #24]
        break;
 80032ac:	e008      	b.n	80032c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b2:	61bb      	str	r3, [r7, #24]
        break;
 80032b4:	e004      	b.n	80032c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	77bb      	strb	r3, [r7, #30]
        break;
 80032be:	bf00      	nop
    }

    if (pclk != 0U)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085a      	lsrs	r2, r3, #1
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d909      	bls.n	80032f4 <UART_SetConfig+0x238>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e6:	d205      	bcs.n	80032f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003304:	7fbb      	ldrb	r3, [r7, #30]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40013800 	.word	0x40013800
 8003318:	40021000 	.word	0x40021000
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	007a1200 	.word	0x007a1200

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b098      	sub	sp, #96	@ 0x60
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fa5c 	bl	8000938 <HAL_GetTick>
 8003480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d12e      	bne.n	80034ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f88c 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034be:	653b      	str	r3, [r7, #80]	@ 0x50
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e6      	bne.n	80034aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e062      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d149      	bne.n	8003590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f856 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03c      	beq.n	8003590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	623b      	str	r3, [r7, #32]
   return(result);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003534:	633b      	str	r3, [r7, #48]	@ 0x30
 8003536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800353a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e6      	bne.n	8003516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	617b      	str	r3, [r7, #20]
   return(result);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e5      	bne.n	8003548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e011      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3758      	adds	r7, #88	@ 0x58
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e04f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d04b      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fd f9af 	bl	8000938 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e04e      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d037      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b80      	cmp	r3, #128	@ 0x80
 8003602:	d034      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d031      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d110      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f838 	bl	8003696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2208      	movs	r2, #8
 800362a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e029      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003648:	d111      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f81e 	bl	8003696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e00f      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	429a      	cmp	r2, r3
 800368a:	d0a0      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003696:	b480      	push	{r7}
 8003698:	b095      	sub	sp, #84	@ 0x54
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80036be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	61fb      	str	r3, [r7, #28]
   return(result);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003708:	2b01      	cmp	r3, #1
 800370a:	d118      	bne.n	800373e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	60bb      	str	r3, [r7, #8]
   return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f023 0310 	bic.w	r3, r3, #16
 8003720:	647b      	str	r3, [r7, #68]	@ 0x44
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6979      	ldr	r1, [r7, #20]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e6      	bne.n	800370c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003752:	bf00      	nop
 8003754:	3754      	adds	r7, #84	@ 0x54
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <memset>:
 800375e:	4402      	add	r2, r0
 8003760:	4603      	mov	r3, r0
 8003762:	4293      	cmp	r3, r2
 8003764:	d100      	bne.n	8003768 <memset+0xa>
 8003766:	4770      	bx	lr
 8003768:	f803 1b01 	strb.w	r1, [r3], #1
 800376c:	e7f9      	b.n	8003762 <memset+0x4>
	...

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4d0d      	ldr	r5, [pc, #52]	@ (80037a8 <__libc_init_array+0x38>)
 8003774:	4c0d      	ldr	r4, [pc, #52]	@ (80037ac <__libc_init_array+0x3c>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	2600      	movs	r6, #0
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	4d0b      	ldr	r5, [pc, #44]	@ (80037b0 <__libc_init_array+0x40>)
 8003782:	4c0c      	ldr	r4, [pc, #48]	@ (80037b4 <__libc_init_array+0x44>)
 8003784:	f000 f818 	bl	80037b8 <_init>
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	2600      	movs	r6, #0
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08003808 	.word	0x08003808
 80037ac:	08003808 	.word	0x08003808
 80037b0:	08003808 	.word	0x08003808
 80037b4:	0800380c 	.word	0x0800380c

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
